-- Premium UI Library v3.0
-- Beautiful, compact, feature-rich

local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Themes
local Themes = {
    Dark = {
        Background = Color3.fromRGB(15, 15, 15),
        Element = Color3.fromRGB(20, 20, 20),
        ElementHover = Color3.fromRGB(25, 25, 25),
        Accent = Color3.fromRGB(64, 120, 255),
        Text = Color3.fromRGB(240, 240, 240),
        SubText = Color3.fromRGB(150, 150, 150),
        Divider = Color3.fromRGB(30, 30, 30),
        Success = Color3.fromRGB(67, 204, 101),
        Warning = Color3.fromRGB(255, 170, 28),
        Error = Color3.fromRGB(236, 87, 87)
    },
    Light = {
        Background = Color3.fromRGB(250, 250, 250),
        Element = Color3.fromRGB(245, 245, 245),
        ElementHover = Color3.fromRGB(235, 235, 235),
        Accent = Color3.fromRGB(64, 120, 255),
        Text = Color3.fromRGB(20, 20, 20),
        SubText = Color3.fromRGB(100, 100, 100),
        Divider = Color3.fromRGB(220, 220, 220),
        Success = Color3.fromRGB(67, 204, 101),
        Warning = Color3.fromRGB(255, 170, 28),
        Error = Color3.fromRGB(236, 87, 87)
    },
    Ocean = {
        Background = Color3.fromRGB(13, 17, 23),
        Element = Color3.fromRGB(22, 27, 34),
        ElementHover = Color3.fromRGB(30, 36, 45),
        Accent = Color3.fromRGB(88, 166, 255),
        Text = Color3.fromRGB(201, 209, 217),
        SubText = Color3.fromRGB(139, 148, 158),
        Divider = Color3.fromRGB(33, 38, 45),
        Success = Color3.fromRGB(87, 242, 135),
        Warning = Color3.fromRGB(255, 193, 94),
        Error = Color3.fromRGB(237, 94, 104)
    },
    Midnight = {
        Background = Color3.fromRGB(10, 10, 15),
        Element = Color3.fromRGB(15, 15, 20),
        ElementHover = Color3.fromRGB(20, 20, 25),
        Accent = Color3.fromRGB(138, 87, 255),
        Text = Color3.fromRGB(230, 230, 240),
        SubText = Color3.fromRGB(140, 140, 150),
        Divider = Color3.fromRGB(25, 25, 30),
        Success = Color3.fromRGB(152, 195, 121),
        Warning = Color3.fromRGB(229, 192, 123),
        Error = Color3.fromRGB(224, 108, 117)
    }
}

-- Current Config
local Config = {
    Theme = Themes.Dark,
    Font = Enum.Font.Gotham,
    TextSize = 12,
    WindowSize = UDim2.new(0, 550, 0, 400),
    CornerRadius = 8,
    AnimSpeed = 0.25,
    Notifications = true,
    Sounds = true
}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for k, v in pairs(properties or {}) do
        if k ~= "Parent" then
            instance[k] = v
        end
    end
    if properties and properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function Tween(instance, properties, duration)
    TweenService:Create(
        instance,
        TweenInfo.new(duration or Config.AnimSpeed, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        properties
    ):Play()
end

local function AddHoverEffect(button)
    button.MouseEnter:Connect(function()
        Tween(button, {BackgroundColor3 = Config.Theme.ElementHover}, 0.15)
    end)
    
    button.MouseLeave:Connect(function()
        Tween(button, {BackgroundColor3 = Config.Theme.Element}, 0.15)
    end)
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragInput, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            Tween(frame, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            }, 0.05)
        end
    end)
end

-- Create Window
function Library:CreateWindow(options)
    options = options or {}
    
    local Window = {}
    setmetatable(Window, Library)
    
    -- Initialize properties
    Window.Tabs = {}
    Window.ActiveTab = nil
    Window.Notifications = {}
    Window.CurrentTheme = options.Theme or "Dark"
    
    -- Apply theme
    Config.Theme = Themes[Window.CurrentTheme] or Themes.Dark
    
    -- Clean existing
    if CoreGui:FindFirstChild("PremiumUI") then
        CoreGui:FindFirstChild("PremiumUI"):Destroy()
    end
    
    -- Main GUI
    Window.GUI = Create("ScreenGui", {
        Name = "PremiumUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        Parent = CoreGui
    })
    
    -- Main Frame
    Window.Main = Create("Frame", {
        Name = "Main",
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -275, 0.5, -200),
        Size = Config.WindowSize,
        ClipsDescendants = true,
        Parent = Window.GUI
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, Config.CornerRadius),
        Parent = Window.Main
    })
    
    -- Shadow
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -15, 0, -15),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = -1,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        Parent = Window.Main
    })
    
    -- Title Bar
    Window.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 38),
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, Config.CornerRadius),
        Parent = Window.TitleBar
    })
    
    -- Fix bottom corners
    Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0),
        Parent = Window.TitleBar
    })
    
    -- Title
    Window.Title = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = options.Title or "Premium UI",
        TextColor3 = Config.Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Window.TitleBar
    })
    
    -- Window Controls Container
    local Controls = Create("Frame", {
        Name = "Controls",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -100, 0, 0),
        Size = UDim2.new(0, 100, 1, 0),
        Parent = Window.TitleBar
    })
    
    -- Settings Button
    local SettingsBtn = Create("TextButton", {
        Name = "Settings",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.Gotham,
        Text = "⚙",
        TextColor3 = Config.Theme.SubText,
        TextSize = 16,
        Parent = Controls
    })
    
    -- Minimize Button
    local MinimizeBtn = Create("TextButton", {
        Name = "Minimize",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.Gotham,
        Text = "−",
        TextColor3 = Config.Theme.SubText,
        TextSize = 20,
        Parent = Controls
    })
    
    -- Close Button
    local CloseBtn = Create("TextButton", {
        Name = "Close",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 60, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Enum.Font.Gotham,
        Text = "×",
        TextColor3 = Config.Theme.SubText,
        TextSize = 20,
        Parent = Controls
    })
    
    -- Button Hover Effects
    for _, btn in pairs({SettingsBtn, MinimizeBtn, CloseBtn}) do
        btn.MouseEnter:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.Text}, 0.15)
        end)
        
        btn.MouseLeave:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.SubText}, 0.15)
        end)
    end
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {TextColor3 = Config.Theme.Error}, 0.15)
    end)
    
    -- Navigation Container
    Window.Navigation = Create("Frame", {
        Name = "Navigation",
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 38),
        Size = UDim2.new(0, 120, 1, -38),
        Parent = Window.Main
    })
    
    -- Tab Container
    Window.TabContainer = Create("ScrollingFrame", {
        Name = "TabContainer",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 5),
        Size = UDim2.new(1, -10, 1, -10),
        ScrollBarThickness = 0,
        Parent = Window.Navigation
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 4),
        Parent = Window.TabContainer
    })
    
    -- Content Container
    Window.ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 125, 0, 43),
        Size = UDim2.new(1, -130, 1, -48),
        Parent = Window.Main
    })
    
    -- Settings Panel
    Window.SettingsPanel = Create("Frame", {
        Name = "SettingsPanel",
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 5, 0, 0),
        Size = UDim2.new(0, 200, 1, 0),
        Visible = false,
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, Config.CornerRadius),
        Parent = Window.SettingsPanel
    })
    
    local SettingsTitle = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "Settings",
        TextColor3 = Config.Theme.Text,
        TextSize = 14,
        Parent = Window.SettingsPanel
    })
    
    local ThemeLabel = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 40),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.Gotham,
        Text = "Theme",
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        Parent = Window.SettingsPanel
    })
    
    local ThemeButtons = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 65),
        Size = UDim2.new(1, -20, 0, 100),
        Parent = Window.SettingsPanel
    })
    
    local themeY = 0
    for themeName, themeColors in pairs(Themes) do
        local ThemeBtn = Create("TextButton", {
            BackgroundColor3 = themeColors.Element,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, themeY),
            Size = UDim2.new(1, 0, 0, 28),
            Font = Enum.Font.Gotham,
            Text = themeName,
            TextColor3 = themeColors.Text,
            TextSize = 11,
            Parent = ThemeButtons
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = ThemeBtn
        })
        
        ThemeBtn.MouseButton1Click:Connect(function()
            Window:SetTheme(themeName)
        end)
        
        themeY = themeY + 32
    end
    
    -- Settings Toggle
    local settingsOpen = false
    SettingsBtn.MouseButton1Click:Connect(function()
        settingsOpen = not settingsOpen
        Window.SettingsPanel.Visible = settingsOpen
        
        if settingsOpen then
            Tween(Window.SettingsPanel, {Position = UDim2.new(1, -205, 0, 0)}, 0.3)
        else
            Tween(Window.SettingsPanel, {Position = UDim2.new(1, 5, 0, 0)}, 0.3)
        end
    end)
    
    -- Minimize Logic
    local minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            Tween(Window.Main, {Size = UDim2.new(0, 550, 0, 38)}, 0.3)
            Window.Navigation.Visible = false
            Window.ContentContainer.Visible = false
        else
            Tween(Window.Main, {Size = Config.WindowSize}, 0.3)
            wait(0.3)
            Window.Navigation.Visible = true
            Window.ContentContainer.Visible = true
        end
    end)
    
    -- Close Logic
    CloseBtn.MouseButton1Click:Connect(function()
        Window.GUI:Destroy()
    end)
    
    -- Make Draggable
    MakeDraggable(Window.Main, Window.TitleBar)
    
    -- Notification System
    function Window:Notify(options)
        if not Config.Notifications then return end
        
        local Notification = Create("Frame", {
            BackgroundColor3 = Config.Theme.Element,
            BorderSizePixel = 0,
            Position = UDim2.new(1, -220, 1, 0),
            Size = UDim2.new(0, 200, 0, 60),
            Parent = Window.GUI
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = Notification
        })
        
        local Title = Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -20, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = options.Title or "Notification",
            TextColor3 = Config.Theme.Text,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = Notification
        })
        
        local Message = Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 25),
            Size = UDim2.new(1, -20, 0, 30),
            Font = Enum.Font.Gotham,
            Text = options.Content or "",
            TextColor3 = Config.Theme.SubText,
            TextSize = 11,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            Parent = Notification
        })
        
        -- Animation
        Tween(Notification, {Position = UDim2.new(1, -220, 1, -70)}, 0.3)
        
        wait(options.Duration or 3)
        
        Tween(Notification, {Position = UDim2.new(1, -220, 1, 60)}, 0.3)
        wait(0.3)
        Notification:Destroy()
    end
    
    -- Set Theme Function
    function Window:SetTheme(themeName)
        local theme = Themes[themeName]
        if not theme then return end
        
        Config.Theme = theme
        Window.CurrentTheme = themeName
        
        -- Update all UI elements
        Window.Main.BackgroundColor3 = theme.Background
        Window.TitleBar.BackgroundColor3 = theme.Element
        Window.Navigation.BackgroundColor3 = theme.Element
        Window.Title.TextColor3 = theme.Text
        
        -- Update all tabs
        for _, tab in pairs(Window.Tabs) do
            if tab.Button then
                tab.Button.BackgroundColor3 = theme.Element
                tab.Label.TextColor3 = theme.SubText
                tab.Icon.TextColor3 = theme.SubText
            end
        end
        
        Window:Notify({
            Title = "Theme Changed",
            Content = "Theme set to " .. themeName,
            Duration = 2
        })
    end
    
    return Window
end

-- Create Tab
function Library:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    Tab.Elements = {}
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        Name = name,
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 32),
        Text = "",
        Parent = self.TabContainer
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Tab.Button
    })
    
    Tab.Icon = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Enum.Font.Gotham,
        Text = icon or "📄",
        TextColor3 = Config.Theme.SubText,
        TextSize = 14,
        Parent = Tab.Button
    })
    
    Tab.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0.5, -8),
        Size = UDim2.new(1, -35, 0, 16),
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Tab.Button
    })
    
    -- Tab Page
    Tab.Page = Create("ScrollingFrame", {
        Name = name,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Config.Theme.Accent,
        Visible = false,
        Parent = self.ContentContainer
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8),
        Parent = Tab.Page
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    -- Selection Logic
    Tab.Button.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            t.Page.Visible = false
            Tween(t.Button, {BackgroundColor3 = Config.Theme.Element}, 0.2)
            Tween(t.Icon, {TextColor3 = Config.Theme.SubText}, 0.2)
            Tween(t.Label, {TextColor3 = Config.Theme.SubText}, 0.2)
        end
        
        Tab.Page.Visible = true
        Tween(Tab.Button, {BackgroundColor3 = Config.Theme.ElementHover}, 0.2)
        Tween(Tab.Icon, {TextColor3 = Config.Theme.Accent}, 0.2)
        Tween(Tab.Label, {TextColor3 = Config.Theme.Text}, 0.2)
        
        self.ActiveTab = Tab
    end)
    
    -- Auto select first tab
    if #self.Tabs == 0 then
        Tab.Page.Visible = true
        Tab.Button.BackgroundColor3 = Config.Theme.ElementHover
        Tab.Icon.TextColor3 = Config.Theme.Accent
        Tab.Label.TextColor3 = Config.Theme.Text
        self.ActiveTab = Tab
    end
    
    table.insert(self.Tabs, Tab)
    return Tab
end

-- Create Section
function Library:AddSection(tab, name)
    local Section = {}
    
    Section.Container = Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 30),
        Parent = tab.Page
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Section.Container
    })
    
    Section.Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Section.Container
    })
    
    Section.Content = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 30),
        Size = UDim2.new(1, -10, 1, -35),
        Parent = Section.Container
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 6),
        Parent = Section.Content
    })
    
    local function UpdateSize()
        local size = Section.Content.UIListLayout.AbsoluteContentSize.Y
        Section.Container.Size = UDim2.new(1, -10, 0, size + 35)
    end
    
    Section.Content.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(UpdateSize)
    UpdateSize()
    
    return Section
end

-- Create Button
function Library:AddButton(section, options)
    local Button = {}
    
    Button.Container = Create("TextButton", {
        BackgroundColor3 = Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 28),
        Text = "",
        Parent = section.Content
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Button.Container
    })
    
    Button.Text = Create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Button",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Button.Container
    })
    
    AddHoverEffect(Button.Container)
    
    Button.Container.MouseButton1Click:Connect(function()
        -- Ripple effect
        local Ripple = Create("Frame", {
            BackgroundColor3 = Config.Theme.Accent,
            BackgroundTransparency = 0.7,
            BorderSizePixel = 0,
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0, 0, 0, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Parent = Button.Container
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = Ripple
        })
        
        Ripple:TweenSize(UDim2.new(2, 0, 2, 0), "Out", "Quad", 0.5, true, function()
            Ripple:Destroy()
        end)
        
        Tween(Ripple, {BackgroundTransparency = 1}, 0.5)
        
        if options.Callback then
            options.Callback()
        end
    end)
    
    return Button
end

-- Create Toggle
function Library:AddToggle(section, options)
    local Toggle = {}
    Toggle.State = options.Default or false
    
    Toggle.Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Parent = section.Content
    })
    
    Toggle.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 0),
        Size = UDim2.new(1, -45, 1, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Toggle",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Toggle.Container
    })
    
    Toggle.Switch = Create("Frame", {
        BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -40, 0.5, -9),
        Size = UDim2.new(0, 36, 0, 18),
        Parent = Toggle.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 9),
        Parent = Toggle.Switch
    })
    
    Toggle.Knob = Create("Frame", {
        BackgroundColor3 = Config.Theme.Text,
        BorderSizePixel = 0,
        Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7),
        Size = UDim2.new(0, 14, 0, 14),
        Parent = Toggle.Switch
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 7),
        Parent = Toggle.Knob
    })
    
    local Button = Create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = Toggle.Container
    })
    
    local function SetState(state)
        Toggle.State = state
        Tween(Toggle.Switch, {
            BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.ElementHover
        }, 0.2)
        Tween(Toggle.Knob, {
            Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7)
        }, 0.2)
        
        if options.Callback then
            options.Callback(Toggle.State)
        end
    end
    
    Button.MouseButton1Click:Connect(function()
        SetState(not Toggle.State)
    end)
    
    return Toggle
end

-- Create Slider
function Library:AddSlider(section, options)
    local Slider = {}
    Slider.Value = options.Default or options.Min
    
    Slider.Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 38),
        Parent = section.Content
    })
    
    Slider.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 0),
        Size = UDim2.new(1, -50, 0, 16),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Slider",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Slider.Container
    })
    
    Slider.Value_Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -45, 0, 0),
        Size = UDim2.new(0, 40, 0, 16),
        Font = Enum.Font.Gotham,
        Text = tostring(Slider.Value),
        TextColor3 = Config.Theme.SubText,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = Slider.Container
    })
    
    Slider.Background = Create("Frame", {
        BackgroundColor3 = Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 20),
        Size = UDim2.new(1, -10, 0, 4),
        Parent = Slider.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Slider.Background
    })
    
    Slider.Fill = Create("Frame", {
        BackgroundColor3 = Config.Theme.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new((Slider.Value - options.Min) / (options.Max - options.Min), 0, 1, 0),
        Parent = Slider.Background
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Slider.Fill
    })
    
    Slider.Knob = Create("Frame", {
        BackgroundColor3 = Config.Theme.Text,
        BorderSizePixel = 0,
        Position = UDim2.new((Slider.Value - options.Min) / (options.Max - options.Min), -5, 0.5, -5),
        Size = UDim2.new(0, 10, 0, 10),
        Parent = Slider.Background
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = Slider.Knob
    })
    
    local dragging = false
    
    Slider.Background.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local relativePos = mousePos.X - Slider.Background.AbsolutePosition.X
            local percentage = math.clamp(relativePos / Slider.Background.AbsoluteSize.X, 0, 1)
            
            Slider.Value = math.floor(options.Min + (options.Max - options.Min) * percentage)
            Slider.Value_Label.Text = tostring(Slider.Value)
            
            Tween(Slider.Fill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.05)
            Tween(Slider.Knob, {Position = UDim2.new(percentage, -5, 0.5, -5)}, 0.05)
            
            if options.Callback then
                options.Callback(Slider.Value)
            end
        end
    end)
    
    return Slider
end

-- Create Dropdown
function Library:AddDropdown(section, options)
    local Dropdown = {}
    Dropdown.Selected = options.Default or options.Options[1]
    Dropdown.Open = false
    
    Dropdown.Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = section.Content
    })
    
    Dropdown.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = Dropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Dropdown.Button
    })
    
    Dropdown.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 0),
        Size = UDim2.new(0.5, -8, 1, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Dropdown",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Dropdown.Button
    })
    
    Dropdown.Value = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(0.5, -25, 1, 0),
        Font = Enum.Font.Gotham,
        Text = Dropdown.Selected,
        TextColor3 = Config.Theme.SubText,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = Dropdown.Button
    })
    
    Dropdown.Arrow = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Enum.Font.Gotham,
        Text = "▼",
        TextColor3 = Config.Theme.SubText,
        TextSize = 8,
        Parent = Dropdown.Button
    })
    
    Dropdown.List = Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 3),
        Size = UDim2.new(1, 0, 0, 0),
        ClipsDescendants = true,
        ZIndex = 5,
        Parent = Dropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Dropdown.List
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = Dropdown.List
    })
    
    for _, option in ipairs(options.Options) do
        local OptionBtn = Create("TextButton", {
            BackgroundColor3 = Config.Theme.Element,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 24),
            Font = Enum.Font.Gotham,
            Text = option,
            TextColor3 = Config.Theme.SubText,
            TextSize = 11,
            Parent = Dropdown.List
        })
        
        OptionBtn.MouseEnter:Connect(function()
            Tween(OptionBtn, {
                BackgroundColor3 = Config.Theme.ElementHover,
                TextColor3 = Config.Theme.Text
            }, 0.15)
        end)
        
        OptionBtn.MouseLeave:Connect(function()
            Tween(OptionBtn, {
                BackgroundColor3 = Config.Theme.Element,
                TextColor3 = Config.Theme.SubText
            }, 0.15)
        end)
        
        OptionBtn.MouseButton1Click:Connect(function()
            Dropdown.Selected = option
            Dropdown.Value.Text = option
            Dropdown.Open = false
            
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 0}, 0.2)
            
            if options.Callback then
                options.Callback(option)
            end
        end)
    end
    
    Dropdown.Button.MouseButton1Click:Connect(function()
        Dropdown.Open = not Dropdown.Open
        
        if Dropdown.Open then
            Dropdown.Container.ZIndex = 10
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, math.min(#options.Options * 24, 120))}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 180}, 0.2)
        else
            Dropdown.Container.ZIndex = 1
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 0}, 0.2)
        end
    end)
    
    return Dropdown
end

-- Create Input
function Library:AddInput(section, options)
    local Input = {}
    
    Input.Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = section.Content
    })
    
    Input.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 0),
        Size = UDim2.new(0.35, -5, 1, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Input",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Input.Container
    })
    
    Input.TextBox = Create("TextBox", {
        BackgroundColor3 = Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Position = UDim2.new(0.35, 5, 0, 0),
        Size = UDim2.new(0.65, -5, 1, 0),
        Font = Enum.Font.Gotham,
        PlaceholderText = options.Placeholder or "Enter text...",
        PlaceholderColor3 = Config.Theme.SubText,
        Text = options.Default or "",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        Parent = Input.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Input.TextBox
    })
    
    Input.TextBox.Focused:Connect(function()
        Tween(Input.TextBox, {BackgroundColor3 = Config.Theme.Element}, 0.15)
    end)
    
    Input.TextBox.FocusLost:Connect(function(enterPressed)
        Tween(Input.TextBox, {BackgroundColor3 = Config.Theme.ElementHover}, 0.15)
        
        if enterPressed and options.Callback then
            options.Callback(Input.TextBox.Text)
        end
    end)
    
    return Input
end

return Library
