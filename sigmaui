-- SigmaUI Library v1.0
-- Beautiful, Modern, Minimalistic UI Library for Roblox

local SigmaUI = {}
SigmaUI.__index = SigmaUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Theme System
local Themes = {
    Default = {
        Background = Color3.fromRGB(15, 15, 15),
        Secondary = Color3.fromRGB(25, 25, 25),
        Tertiary = Color3.fromRGB(35, 35, 35),
        Accent = Color3.fromRGB(0, 150, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(180, 180, 180),
        Success = Color3.fromRGB(0, 255, 100),
        Warning = Color3.fromRGB(255, 200, 0),
        Error = Color3.fromRGB(255, 50, 50)
    },
    Dark = {
        Background = Color3.fromRGB(10, 10, 10),
        Secondary = Color3.fromRGB(20, 20, 20),
        Tertiary = Color3.fromRGB(30, 30, 30),
        Accent = Color3.fromRGB(100, 50, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(150, 150, 150),
        Success = Color3.fromRGB(50, 255, 100),
        Warning = Color3.fromRGB(255, 180, 0),
        Error = Color3.fromRGB(255, 30, 30)
    },
    Ocean = {
        Background = Color3.fromRGB(10, 20, 30),
        Secondary = Color3.fromRGB(20, 30, 40),
        Tertiary = Color3.fromRGB(30, 40, 50),
        Accent = Color3.fromRGB(0, 200, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(180, 200, 220),
        Success = Color3.fromRGB(0, 255, 150),
        Warning = Color3.fromRGB(255, 200, 50),
        Error = Color3.fromRGB(255, 100, 100)
    }
}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function Tween(instance, properties, duration, style, direction)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quart, direction or Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function MakeDraggable(frame, handle)
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        Tween(frame, {Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)}, 0.1)
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Main Window Class
function SigmaUI:CreateWindow(config)
    config = config or {}
    local windowName = config.Name or "Sigma UI"
    local theme = Themes[config.Theme or "Default"]
    
    local ScreenGui = Create("ScreenGui", {
        Name = "SigmaUI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    local MainFrame = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -300, 0.5, -250),
        Size = UDim2.new(0, 600, 0, 500),
        ClipsDescendants = true
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = MainFrame
    })
    
    -- Shadow
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -20, 0, -20),
        Size = UDim2.new(1, 40, 1, 40),
        ZIndex = -1,
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        ImageTransparency = 0.6
    })
    
    -- Title Bar
    local TitleBar = Create("Frame", {
        Name = "TitleBar",
        Parent = MainFrame,
        BackgroundColor3 = theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 40)
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = TitleBar
    })
    
    Create("Frame", {
        Name = "BottomCover",
        Parent = TitleBar,
        BackgroundColor3 = theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0)
    })
    
    local Title = Create("TextLabel", {
        Name = "Title",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = windowName,
        TextColor3 = theme.Text,
        TextScaled = false,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Control Buttons
    local ControlsFrame = Create("Frame", {
        Name = "Controls",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -90, 0, 5),
        Size = UDim2.new(0, 85, 0, 30)
    })
    
    local MinimizeBtn = Create("TextButton", {
        Name = "Minimize",
        Parent = ControlsFrame,
        BackgroundColor3 = theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, -12),
        Size = UDim2.new(0, 24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = "-",
        TextColor3 = theme.Text,
        TextSize = 18
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = MinimizeBtn
    })
    
    local CloseBtn = Create("TextButton", {
        Name = "Close",
        Parent = ControlsFrame,
        BackgroundColor3 = theme.Error,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 55, 0.5, -12),
        Size = UDim2.new(0, 24, 0, 24),
        Font = Enum.Font.Gotham,
        Text = "Ã—",
        TextColor3 = theme.Text,
        TextSize = 20
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = CloseBtn
    })
    
    -- Tab Container
    local TabContainer = Create("Frame", {
        Name = "TabContainer",
        Parent = MainFrame,
        BackgroundColor3 = theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(0, 150, 1, -40)
    })
    
    local TabList = Create("ScrollingFrame", {
        Name = "TabList",
        Parent = TabContainer,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 5),
        Size = UDim2.new(1, -10, 1, -10),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = theme.Accent,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    Create("UIListLayout", {
        Parent = TabList,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    -- Content Container
    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 40),
        Size = UDim2.new(1, -150, 1, -40)
    })
    
    -- Make window draggable
    MakeDraggable(MainFrame, TitleBar)
    
    -- Minimize functionality
    local minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(MainFrame, {Size = UDim2.new(0, 600, 0, 40)})
            MinimizeBtn.Text = "+"
        else
            Tween(MainFrame, {Size = UDim2.new(0, 600, 0, 500)})
            MinimizeBtn.Text = "-"
        end
    end)
    
    -- Close functionality
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(MainFrame, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    local WindowTable = {}
    WindowTable.Tabs = {}
    WindowTable.Theme = theme
    
    -- Tab System
    function WindowTable:CreateTab(tabName, icon)
        local TabButton = Create("TextButton", {
            Name = tabName,
            Parent = TabList,
            BackgroundColor3 = theme.Tertiary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 35),
            Font = Enum.Font.Gotham,
            Text = "  " .. tabName,
            TextColor3 = theme.TextDark,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            AutoButtonColor = false
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = TabButton
        })
        
        local TabContent = Create("ScrollingFrame", {
            Name = tabName,
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(1, -20, 1, -20),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = theme.Accent,
            Visible = false,
            CanvasSize = UDim2.new(0, 0, 0, 0)
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })
        
        -- Update canvas size automatically
        TabContent.ChildAdded:Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, TabContent.UIListLayout.AbsoluteContentSize.Y + 20)
        end)
        
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(ContentContainer:GetChildren()) do
                if tab:IsA("ScrollingFrame") then
                    tab.Visible = false
                end
            end
            for _, btn in pairs(TabList:GetChildren()) do
                if btn:IsA("TextButton") then
                    Tween(btn, {BackgroundColor3 = theme.Tertiary, TextColor3 = theme.TextDark}, 0.2)
                end
            end
            
            TabContent.Visible = true
            Tween(TabButton, {BackgroundColor3 = theme.Accent, TextColor3 = theme.Text}, 0.2)
        end)
        
        -- Select first tab by default
        if #WindowTable.Tabs == 0 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = theme.Accent
            TabButton.TextColor3 = theme.Text
        end
        
        local Tab = {}
        
        -- Section Creation
        function Tab:CreateSection(sectionName)
            local Section = Create("Frame", {
                Name = sectionName,
                Parent = TabContent,
                BackgroundColor3 = theme.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Section
            })
            
            local SectionTitle = Create("TextLabel", {
                Name = "Title",
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 5),
                Size = UDim2.new(1, -20, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = sectionName,
                TextColor3 = theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local SectionContent = Create("Frame", {
                Name = "Content",
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(1, -20, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Create("UIListLayout", {
                Parent = SectionContent,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            })
            
            local SectionTable = {}
            
            -- Button Element
            function SectionTable:CreateButton(config)
                config = config or {}
                local buttonText = config.Name or "Button"
                local callback = config.Callback or function() end
                
                local ButtonFrame = Create("Frame", {
                    Name = buttonText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local Button = Create("TextButton", {
                    Name = "Button",
                    Parent = ButtonFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = buttonText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Button
                })
                
                Button.MouseEnter:Connect(function()
                    Tween(Button, {BackgroundColor3 = theme.Accent}, 0.2)
                end)
                
                Button.MouseLeave:Connect(function()
                    Tween(Button, {BackgroundColor3 = theme.Tertiary}, 0.2)
                end)
                
                Button.MouseButton1Click:Connect(function()
                    local circle = Create("Frame", {
                        Parent = Button,
                        BackgroundColor3 = theme.Text,
                        BackgroundTransparency = 0.7,
                        BorderSizePixel = 0,
                        Position = UDim2.new(0, Mouse.X - Button.AbsolutePosition.X, 0, Mouse.Y - Button.AbsolutePosition.Y),
                        Size = UDim2.new(0, 0, 0, 0)
                    })
                    
                    Create("UICorner", {
                        CornerRadius = UDim.new(1, 0),
                        Parent = circle
                    })
                    
                    Tween(circle, {
                        Position = UDim2.new(0, Mouse.X - Button.AbsolutePosition.X - 25, 0, Mouse.Y - Button.AbsolutePosition.Y - 25),
                        Size = UDim2.new(0, 50, 0, 50),
                        BackgroundTransparency = 1
                    }, 0.5)
                    
                    spawn(function()
                        wait(0.5)
                        circle:Destroy()
                    end)
                    
                    callback()
                end)
                
                return Button
            end
            
            -- Toggle Element
            function SectionTable:CreateToggle(config)
                config = config or {}
                local toggleText = config.Name or "Toggle"
                local default = config.Default or false
                local callback = config.Callback or function() end
                
                local ToggleFrame = Create("Frame", {
                    Name = toggleText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local ToggleLabel = Create("TextLabel", {
                    Name = "Label",
                    Parent = ToggleFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = toggleText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ToggleButton = Create("Frame", {
                    Name = "Toggle",
                    Parent = ToggleFrame,
                    BackgroundColor3 = default and theme.Accent or theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -45, 0.5, -10),
                    Size = UDim2.new(0, 40, 0, 20)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleButton
                })
                
                local ToggleCircle = Create("Frame", {
                    Name = "Circle",
                    Parent = ToggleButton,
                    BackgroundColor3 = theme.Text,
                    BorderSizePixel = 0,
                    Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleCircle
                })
                
                local toggled = default
                
                ToggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggled = not toggled
                        
                        if toggled then
                            Tween(ToggleButton, {BackgroundColor3 = theme.Accent}, 0.2)
                            Tween(ToggleCircle, {Position = UDim2.new(1, -18, 0.5, -8)}, 0.2)
                        else
                            Tween(ToggleButton, {BackgroundColor3 = theme.Tertiary}, 0.2)
                            Tween(ToggleCircle, {Position = UDim2.new(0, 2, 0.5, -8)}, 0.2)
                        end
                        
                        callback(toggled)
                    end
                end)
                
                local ToggleTable = {
                    Value = toggled,
                    Set = function(self, value)
                        toggled = value
                        if toggled then
                            Tween(ToggleButton, {BackgroundColor3 = theme.Accent}, 0.2)
                            Tween(ToggleCircle, {Position = UDim2.new(1, -18, 0.5, -8)}, 0.2)
                        else
                            Tween(ToggleButton, {BackgroundColor3 = theme.Tertiary}, 0.2)
                            Tween(ToggleCircle, {Position = UDim2.new(0, 2, 0.5, -8)}, 0.2)
                        end
                        callback(toggled)
                    end
                }
                
                return ToggleTable
            end
            
            -- Slider Element
            function SectionTable:CreateSlider(config)
                config = config or {}
                local sliderText = config.Name or "Slider"
                local min = config.Min or 0
                local max = config.Max or 100
                local default = config.Default or min
                local callback = config.Callback or function() end
                
                local SliderFrame = Create("Frame", {
                    Name = sliderText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })
                
                local SliderLabel = Create("TextLabel", {
                    Name = "Label",
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -50, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = sliderText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ValueLabel = Create("TextLabel", {
                    Name = "Value",
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -45, 0, 0),
                    Size = UDim2.new(0, 45, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = tostring(default),
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local SliderBar = Create("Frame", {
                    Name = "SliderBar",
                    Parent = SliderFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 6)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderBar
                })
                
                local SliderFill = Create("Frame", {
                    Name = "Fill",
                    Parent = SliderBar,
                    BackgroundColor3 = theme.Accent,
                    BorderSizePixel = 0,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderFill
                })
                
                local SliderButton = Create("Frame", {
                    Name = "Button",
                    Parent = SliderBar,
                    BackgroundColor3 = theme.Text,
                    BorderSizePixel = 0,
                    Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderButton
                })
                
                local dragging = false
                
                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = mousePos.X - SliderBar.AbsolutePosition.X
                        local percentage = math.clamp(relativePos / SliderBar.AbsoluteSize.X, 0, 1)
                        local value = math.floor(min + (max - min) * percentage)
                        
                        SliderButton.Position = UDim2.new(percentage, -8, 0.5, -8)
                        SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        ValueLabel.Text = tostring(value)
                        
                        callback(value)
                    end
                end)
                
                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = mousePos.X - SliderBar.AbsolutePosition.X
                        local percentage = math.clamp(relativePos / SliderBar.AbsoluteSize.X, 0, 1)
                        local value = math.floor(min + (max - min) * percentage)
                        
                        Tween(SliderButton, {Position = UDim2.new(percentage, -8, 0.5, -8)}, 0.2)
                        Tween(SliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.2)
                        ValueLabel.Text = tostring(value)
                        
                        callback(value)
                    end
                end)
                
                return {Value = default}
            end
            
            -- Dropdown Element
            function SectionTable:CreateDropdown(config)
                config = config or {}
                local dropdownText = config.Name or "Dropdown"
                local options = config.Options or {}
                local default = config.Default or options[1]
                local callback = config.Callback or function() end
                
                local DropdownFrame = Create("Frame", {
                    Name = dropdownText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local DropdownButton = Create("TextButton", {
                    Name = "Button",
                    Parent = DropdownFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = dropdownText .. ": " .. (default or "None"),
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropdownButton
                })
                
                local Arrow = Create("TextLabel", {
                    Name = "Arrow",
                    Parent = DropdownButton,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -25, 0, 0),
                    Size = UDim2.new(0, 25, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = "â–¼",
                    TextColor3 = theme.Text,
                    TextSize = 10
                })
                
                local DropdownList = Create("Frame", {
                    Name = "List",
                    Parent = DropdownFrame,
                    BackgroundColor3 = theme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, 5),
                    Size = UDim2.new(1, 0, 0, 0),
                    ClipsDescendants = true,
                    Visible = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropdownList
                })
                
                local ListLayout = Create("UIListLayout", {
                    Parent = DropdownList,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 2)
                })
                
                local isOpen = false
                
                DropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    
                    if isOpen then
                        DropdownList.Visible = true
                        local contentSize = ListLayout.AbsoluteContentSize.Y
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, contentSize + 10)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 35 + contentSize + 15)}, 0.2)
                        Tween(Arrow, {Rotation = 180}, 0.2)
                    else
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 35)}, 0.2)
                        Tween(Arrow, {Rotation = 0}, 0.2)
                        wait(0.2)
                        DropdownList.Visible = false
                    end
                end)
                
                for _, option in ipairs(options) do
                    local OptionButton = Create("TextButton", {
                        Name = option,
                        Parent = DropdownList,
                        BackgroundColor3 = theme.Tertiary,
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, -10, 0, 30),
                        Position = UDim2.new(0, 5, 0, 0),
                        Font = Enum.Font.Gotham,
                        Text = option,
                        TextColor3 = theme.TextDark,
                        TextSize = 12,
                        AutoButtonColor = false
                    })
                    
                    Create("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = OptionButton
                    })
                    
                    OptionButton.MouseEnter:Connect(function()
                        Tween(OptionButton, {BackgroundColor3 = theme.Accent, TextColor3 = theme.Text}, 0.1)
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        Tween(OptionButton, {BackgroundColor3 = theme.Tertiary, TextColor3 = theme.TextDark}, 0.1)
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        DropdownButton.Text = dropdownText .. ": " .. option
                        callback(option)
                        
                        isOpen = false
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 35)}, 0.2)
                        Tween(Arrow, {Rotation = 0}, 0.2)
                        wait(0.2)
                        DropdownList.Visible = false
                    end)
                end
                
                return {Value = default}
            end
            
            -- TextBox Element
            function SectionTable:CreateTextBox(config)
                config = config or {}
                local textboxText = config.Name or "TextBox"
                local placeholder = config.Placeholder or "Enter text..."
                local callback = config.Callback or function() end
                
                local TextBoxFrame = Create("Frame", {
                    Name = textboxText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local TextBoxLabel = Create("TextLabel", {
                    Name = "Label",
                    Parent = TextBoxFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(0.4, -5, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = textboxText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local TextBox = Create("TextBox", {
                    Name = "Input",
                    Parent = TextBoxFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.4, 0, 0, 0),
                    Size = UDim2.new(0.6, 0, 1, 0),
                    Font = Enum.Font.Gotham,
                    PlaceholderText = placeholder,
                    PlaceholderColor3 = theme.TextDark,
                    Text = "",
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    ClearTextOnFocus = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = TextBox
                })
                
                TextBox.FocusLost:Connect(function()
                    callback(TextBox.Text)
                end)
                
                return TextBox
            end
            
            -- Keybind Element
            function SectionTable:CreateKeybind(config)
                config = config or {}
                local keybindText = config.Name or "Keybind"
                local default = config.Default or Enum.KeyCode.F
                local callback = config.Callback or function() end
                
                local KeybindFrame = Create("Frame", {
                    Name = keybindText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local KeybindLabel = Create("TextLabel", {
                    Name = "Label",
                    Parent = KeybindFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -80, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = keybindText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local KeybindButton = Create("TextButton", {
                    Name = "Button",
                    Parent = KeybindFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -75, 0.5, -12),
                    Size = UDim2.new(0, 70, 0, 24),
                    Font = Enum.Font.Gotham,
                    Text = default.Name,
                    TextColor3 = theme.Text,
                    TextSize = 12,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = KeybindButton
                })
                
                local binding = false
                local currentKey = default
                
                KeybindButton.MouseButton1Click:Connect(function()
                    binding = true
                    KeybindButton.Text = "..."
                    Tween(KeybindButton, {BackgroundColor3 = theme.Accent}, 0.2)
                end)
                
                UserInputService.InputBegan:Connect(function(input)
                    if binding then
                        if input.KeyCode ~= Enum.KeyCode.Unknown then
                            binding = false
                            currentKey = input.KeyCode
                            KeybindButton.Text = currentKey.Name
                            Tween(KeybindButton, {BackgroundColor3 = theme.Tertiary}, 0.2)
                        end
                    else
                        if input.KeyCode == currentKey then
                            callback()
                        end
                    end
                end)
                
                return {Key = currentKey}
            end
            
            -- Color Picker Element
            function SectionTable:CreateColorPicker(config)
                config = config or {}
                local pickerText = config.Name or "Color Picker"
                local default = config.Default or Color3.fromRGB(255, 255, 255)
                local callback = config.Callback or function() end
                
                local ColorPickerFrame = Create("Frame", {
                    Name = pickerText,
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local ColorPickerLabel = Create("TextLabel", {
                    Name = "Label",
                    Parent = ColorPickerFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -40, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = pickerText,
                    TextColor3 = theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ColorDisplay = Create("Frame", {
                    Name = "Display",
                    Parent = ColorPickerFrame,
                    BackgroundColor3 = default,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -35, 0.5, -12),
                    Size = UDim2.new(0, 30, 0, 24)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ColorDisplay
                })
                
                Create("UIStroke", {
                    Parent = ColorDisplay,
                    Color = theme.Tertiary,
                    Thickness = 2
                })
                
                local ColorPickerWindow = Create("Frame", {
                    Name = "ColorPicker",
                    Parent = MainFrame,
                    BackgroundColor3 = theme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, -100, 0.5, -150),
                    Size = UDim2.new(0, 200, 0, 250),
                    Visible = false,
                    ZIndex = 100
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 8),
                    Parent = ColorPickerWindow
                })
                
                Create("UIStroke", {
                    Parent = ColorPickerWindow,
                    Color = theme.Accent,
                    Thickness = 2
                })
                
                -- Color Wheel
                local ColorWheel = Create("ImageLabel", {
                    Name = "ColorWheel",
                    Parent = ColorPickerWindow,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0.5, -60, 0, 10),
                    Size = UDim2.new(0, 120, 0, 120),
                    Image = "rbxassetid://698052001"
                })
                
                local WheelPicker = Create("Frame", {
                    Name = "Picker",
                    Parent = ColorWheel,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, -4, 0.5, -4),
                    Size = UDim2.new(0, 8, 0, 8)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = WheelPicker
                })
                
                Create("UIStroke", {
                    Parent = WheelPicker,
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2
                })
                
                -- Value Slider
                local ValueSlider = Create("Frame", {
                    Name = "ValueSlider",
                    Parent = ColorPickerWindow,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, -80, 0, 140),
                    Size = UDim2.new(0, 160, 0, 10)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ValueSlider
                })
                
                Create("UIGradient", {
                    Parent = ValueSlider,
                    Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)),
                        ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
                    }
                })
                
                local ValuePicker = Create("Frame", {
                    Name = "Picker",
                    Parent = ValueSlider,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -6, 0.5, -6),
                    Size = UDim2.new(0, 12, 0, 12)
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ValuePicker
                })
                
                Create("UIStroke", {
                    Parent = ValuePicker,
                    Color = Color3.new(0, 0, 0),
                    Thickness = 2
                })
                
                -- RGB Input
                local RGBFrame = Create("Frame", {
                    Name = "RGB",
                    Parent = ColorPickerWindow,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 160),
                    Size = UDim2.new(1, -20, 0, 30)
                })
                
                local RInput = Create("TextBox", {
                    Name = "R",
                    Parent = RGBFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(0.3, -2, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(default.R * 255)),
                    TextColor3 = theme.Text,
                    TextSize = 12,
                    PlaceholderText = "R"
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = RInput
                })
                
                local GInput = Create("TextBox", {
                    Name = "G",
                    Parent = RGBFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.33, 2, 0, 0),
                    Size = UDim2.new(0.34, -4, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(default.G * 255)),
                    TextColor3 = theme.Text,
                    TextSize = 12,
                    PlaceholderText = "G"
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = GInput
                })
                
                local BInput = Create("TextBox", {
                    Name = "B",
                    Parent = RGBFrame,
                    BackgroundColor3 = theme.Tertiary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.67, 2, 0, 0),
                    Size = UDim2.new(0.33, -2, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(math.floor(default.B * 255)),
                    TextColor3 = theme.Text,
                    TextSize = 12,
                    PlaceholderText = "B"
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = BInput
                })
                
                -- Confirm Button
                local ConfirmButton = Create("TextButton", {
                    Name = "Confirm",
                    Parent = ColorPickerWindow,
                    BackgroundColor3 = theme.Accent,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, -40, 1, -35),
                    Size = UDim2.new(0, 80, 0, 25),
                    Font = Enum.Font.Gotham,
                    Text = "Confirm",
                    TextColor3 = theme.Text,
                    TextSize = 12,
                    AutoButtonColor = false
                })
                
                Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = ConfirmButton
                })
                
                -- Color Picker Logic
                local h, s, v = Color3.toHSV(default)
                local currentColor = default
                
                local function updateColor()
                    currentColor = Color3.fromHSV(h, s, v)
                    ColorDisplay.BackgroundColor3 = currentColor
                    RInput.Text = tostring(math.floor(currentColor.R * 255))
                    GInput.Text = tostring(math.floor(currentColor.G * 255))
                    BInput.Text = tostring(math.floor(currentColor.B * 255))
                end
                
                -- Wheel dragging
                local wheelDragging = false
                
                ColorWheel.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        wheelDragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        wheelDragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if wheelDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local centerX = ColorWheel.AbsolutePosition.X + ColorWheel.AbsoluteSize.X / 2
                        local centerY = ColorWheel.AbsolutePosition.Y + ColorWheel.AbsoluteSize.Y / 2
                        
                        local deltaX = mousePos.X - centerX
                        local deltaY = mousePos.Y - centerY
                        
                        local angle = math.atan2(deltaY, deltaX)
                        local distance = math.min(math.sqrt(deltaX^2 + deltaY^2), ColorWheel.AbsoluteSize.X / 2)
                        
                        h = (angle / (2 * math.pi)) % 1
                        s = distance / (ColorWheel.AbsoluteSize.X / 2)
                        
                        local pickerX = centerX - ColorWheel.AbsolutePosition.X + math.cos(angle) * distance - 4
                        local pickerY = centerY - ColorWheel.AbsolutePosition.Y + math.sin(angle) * distance - 4
                        
                        WheelPicker.Position = UDim2.new(0, pickerX, 0, pickerY)
                        updateColor()
                    end
                end)
                
                -- Value slider dragging
                local valueDragging = false
                
                ValueSlider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        valueDragging = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        valueDragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if valueDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativeX = math.clamp(mousePos.X - ValueSlider.AbsolutePosition.X, 0, ValueSlider.AbsoluteSize.X)
                        v = relativeX / ValueSlider.AbsoluteSize.X
                        
                        ValuePicker.Position = UDim2.new(0, relativeX - 6, 0.5, -6)
                        updateColor()
                    end
                end)
                
                -- RGB Inputs
                RInput.FocusLost:Connect(function()
                    local val = tonumber(RInput.Text)
                    if val then
                        val = math.clamp(val, 0, 255)
                        local r = val / 255
                        currentColor = Color3.new(r, currentColor.G, currentColor.B)
                        h, s, v = Color3.toHSV(currentColor)
                        ColorDisplay.BackgroundColor3 = currentColor
                    end
                end)
                
                GInput.FocusLost:Connect(function()
                    local val = tonumber(GInput.Text)
                    if val then
                        val = math.clamp(val, 0, 255)
                        local g = val / 255
                        currentColor = Color3.new(currentColor.R, g, currentColor.B)
                        h, s, v = Color3.toHSV(currentColor)
                        ColorDisplay.BackgroundColor3 = currentColor
                    end
                end)
                
                BInput.FocusLost:Connect(function()
                    local val = tonumber(BInput.Text)
                    if val then
                        val = math.clamp(val, 0, 255)
                        local b = val / 255
                        currentColor = Color3.new(currentColor.R, currentColor.G, b)
                        h, s, v = Color3.toHSV(currentColor)
                        ColorDisplay.BackgroundColor3 = currentColor
                    end
                end)
                
                -- Show/Hide picker
                ColorDisplay.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ColorPickerWindow.Visible = not ColorPickerWindow.Visible
                        if ColorPickerWindow.Visible then
                            ColorPickerWindow:TweenPosition(
                                UDim2.new(0.5, -100, 0.5, -125),
                                Enum.EasingDirection.Out,
                                Enum.EasingStyle.Back,
                                0.3,
                                true
                            )
                        end
                    end
                end)
                
                ConfirmButton.MouseButton1Click:Connect(function()
                    callback(currentColor)
                    ColorPickerWindow.Visible = false
                end)
                
                MakeDraggable(ColorPickerWindow, ColorPickerWindow)
                
                return {Color = currentColor}
            end
            
            -- Label Element
            function SectionTable:CreateLabel(text)
                local Label = Create("TextLabel", {
                    Name = "Label",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = theme.TextDark,
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                return Label
            end
            
            return SectionTable
        end
        
        table.insert(WindowTable.Tabs, Tab)
        return Tab
    end
    
    -- Notification System
    function WindowTable:Notify(config)
        config = config or {}
        local title = config.Title or "Notification"
        local content = config.Content or ""
        local duration = config.Duration or 3
        
        local Notification = Create("Frame", {
            Name = "Notification",
            Parent = ScreenGui,
            BackgroundColor3 = theme.Background,
            BorderSizePixel = 0,
            Position = UDim2.new(1, 300, 1, -100),
            Size = UDim2.new(0, 280, 0, 80),
            ClipsDescendants = true
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = Notification
        })
        
        Create("UIStroke", {
            Parent = Notification,
            Color = theme.Accent,
            Thickness = 2
        })
        
        local NotifTitle = Create("TextLabel", {
            Name = "Title",
            Parent = Notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -20, 0, 25),
            Font = Enum.Font.GothamBold,
            Text = title,
            TextColor3 = theme.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local NotifContent = Create("TextLabel", {
            Name = "Content",
            Parent = Notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 30),
            Size = UDim2.new(1, -20, 1, -35),
            Font = Enum.Font.Gotham,
            Text = content,
            TextColor3 = theme.TextDark,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })
        
        -- Animate in
        Notification:TweenPosition(
            UDim2.new(1, -290, 1, -100),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Quart,
            0.3,
            true
        )
        
        -- Animate out after duration
        wait(duration)
        Notification:TweenPosition(
            UDim2.new(1, 300, 1, -100),
            Enum.EasingDirection.In,
            Enum.EasingStyle.Quart,
            0.3,
            true
        )
        wait(0.3)
        Notification:Destroy()
    end
    
    -- Initialize with fade in animation
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Tween(MainFrame, {Size = UDim2.new(0, 600, 0, 500), Position = UDim2.new(0.5, -300, 0.5, -250)}, 0.5, Enum.EasingStyle.Back)
    
    return WindowTable
end

return SigmaUI
