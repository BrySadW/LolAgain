-- Sigma UI Library v4.0
-- Premium, Beautiful, Feature-Rich

local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Beautiful Themes
local Themes = {
    Dark = {
        Background = Color3.fromRGB(18, 18, 18),
        Element = Color3.fromRGB(24, 24, 24),
        ElementHover = Color3.fromRGB(28, 28, 28),
        Accent = Color3.fromRGB(64, 150, 255),
        Text = Color3.fromRGB(240, 240, 240),
        SubText = Color3.fromRGB(140, 140, 140),
        Divider = Color3.fromRGB(35, 35, 35),
        Success = Color3.fromRGB(88, 214, 141),
        Warning = Color3.fromRGB(255, 184, 108),
        Error = Color3.fromRGB(255, 118, 117)
    },
    Ocean = {
        Background = Color3.fromRGB(13, 17, 23),
        Element = Color3.fromRGB(22, 27, 34),
        ElementHover = Color3.fromRGB(30, 37, 46),
        Accent = Color3.fromRGB(79, 172, 254),
        Text = Color3.fromRGB(201, 209, 217),
        SubText = Color3.fromRGB(139, 148, 158),
        Divider = Color3.fromRGB(33, 38, 45),
        Success = Color3.fromRGB(87, 242, 135),
        Warning = Color3.fromRGB(255, 193, 94),
        Error = Color3.fromRGB(237, 94, 104)
    },
    Midnight = {
        Background = Color3.fromRGB(15, 15, 20),
        Element = Color3.fromRGB(20, 20, 28),
        ElementHover = Color3.fromRGB(25, 25, 35),
        Accent = Color3.fromRGB(136, 96, 250),
        Text = Color3.fromRGB(230, 230, 240),
        SubText = Color3.fromRGB(140, 140, 155),
        Divider = Color3.fromRGB(30, 30, 40),
        Success = Color3.fromRGB(152, 195, 121),
        Warning = Color3.fromRGB(229, 192, 123),
        Error = Color3.fromRGB(224, 108, 117)
    },
    Rose = {
        Background = Color3.fromRGB(20, 15, 15),
        Element = Color3.fromRGB(28, 20, 20),
        ElementHover = Color3.fromRGB(35, 25, 25),
        Accent = Color3.fromRGB(236, 72, 153),
        Text = Color3.fromRGB(240, 230, 230),
        SubText = Color3.fromRGB(155, 140, 140),
        Divider = Color3.fromRGB(40, 30, 30),
        Success = Color3.fromRGB(134, 239, 172),
        Warning = Color3.fromRGB(253, 224, 71),
        Error = Color3.fromRGB(248, 113, 113)
    },
    Emerald = {
        Background = Color3.fromRGB(15, 20, 18),
        Element = Color3.fromRGB(20, 28, 24),
        ElementHover = Color3.fromRGB(25, 35, 30),
        Accent = Color3.fromRGB(52, 211, 153),
        Text = Color3.fromRGB(230, 240, 235),
        SubText = Color3.fromRGB(140, 155, 145),
        Divider = Color3.fromRGB(30, 40, 35),
        Success = Color3.fromRGB(74, 222, 128),
        Warning = Color3.fromRGB(251, 191, 36),
        Error = Color3.fromRGB(239, 68, 68)
    },
    Sunset = {
        Background = Color3.fromRGB(20, 18, 15),
        Element = Color3.fromRGB(28, 25, 20),
        ElementHover = Color3.fromRGB(35, 32, 25),
        Accent = Color3.fromRGB(251, 146, 60),
        Text = Color3.fromRGB(240, 235, 230),
        SubText = Color3.fromRGB(155, 145, 140),
        Divider = Color3.fromRGB(40, 35, 30),
        Success = Color3.fromRGB(163, 230, 53),
        Warning = Color3.fromRGB(250, 204, 21),
        Error = Color3.fromRGB(220, 38, 38)
    }
}

local Config = {
    Theme = Themes.Dark,
    Font = Enum.Font.Gotham,
    TextSize = 12,
    WindowSize = UDim2.new(0, 600, 0, 380),
    AnimSpeed = 0.25
}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for k, v in pairs(properties or {}) do
        if k ~= "Parent" then
            if typeof(instance[k]) == "RBXScriptSignal" then
                instance[k]:Connect(v)
            else
                instance[k] = v
            end
        end
    end
    if properties and properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function Tween(instance, properties, duration)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or Config.AnimSpeed, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragInput, startPos, dragStart
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            startPos = frame.Position
            dragStart = input.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Main Library
function Library:CreateWindow(options)
    options = options or {}
    
    local Window = {}
    setmetatable(Window, Library)
    
    -- Initialize
    Window.Tabs = {}
    Window.ActiveTab = nil
    Window.CurrentTheme = options.Theme or "Dark"
    Config.Theme = Themes[Window.CurrentTheme] or Themes.Dark
    
    -- Clean up
    if CoreGui:FindFirstChild("SigmaUI") then
        CoreGui:FindFirstChild("SigmaUI"):Destroy()
    end
    
    -- Create GUI
    Window.GUI = Create("ScreenGui", {
        Name = "SigmaUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        Parent = CoreGui
    })
    
    -- Main Frame
    Window.Main = Create("Frame", {
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -300, 0.5, -190),
        Size = Config.WindowSize,
        ClipsDescendants = true,
        Parent = Window.GUI
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Window.Main
    })
    
    -- Drop Shadow
    local Shadow = Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -10, 0, -10),
        Size = UDim2.new(1, 20, 1, 20),
        ZIndex = -1,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.3,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        Parent = Window.Main
    })
    
    -- Title Bar
    Window.TitleBar = Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 36),
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Window.TitleBar
    })
    
    Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0),
        Parent = Window.TitleBar
    })
    
    -- Title
    Window.Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = options.Title or "Sigma UI",
        TextColor3 = Config.Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Window.TitleBar
    })
    
    -- Controls
    local ControlsFrame = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -90, 0, 0),
        Size = UDim2.new(0, 90, 1, 0),
        Parent = Window.TitleBar
    })
    
    local SettingsBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.Gotham,
        Text = "⚙",
        TextColor3 = Config.Theme.SubText,
        TextSize = 14,
        Parent = ControlsFrame
    })
    
    local MinimizeBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.Gotham,
        Text = "−",
        TextColor3 = Config.Theme.SubText,
        TextSize = 18,
        Parent = ControlsFrame
    })
    
    local CloseBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 60, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.Gotham,
        Text = "×",
        TextColor3 = Config.Theme.SubText,
        TextSize = 18,
        Parent = ControlsFrame
    })
    
    -- Hover effects
    for _, btn in pairs({SettingsBtn, MinimizeBtn, CloseBtn}) do
        btn.MouseEnter:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.Text}, 0.15)
        end)
        
        btn.MouseLeave:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.SubText}, 0.15)
        end)
    end
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {TextColor3 = Config.Theme.Error}, 0.15)
    end)
    
    -- Navigation
    Window.Navigation = Create("ScrollingFrame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 36),
        Size = UDim2.new(0, 130, 1, -36),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Config.Theme.Accent,
        ScrollBarImageTransparency = 0.5,
        Parent = Window.Main
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2),
        Parent = Window.Navigation
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Window.Navigation
    })
    
    -- Content
    Window.Content = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 135, 0, 41),
        Size = UDim2.new(1, -140, 1, -46),
        Parent = Window.Main
    })
    
    -- Settings Panel (Fixed)
    Window.SettingsPanel = Create("Frame", {
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 10, 0, 0),
        Size = UDim2.new(0, 180, 1, 0),
        Visible = false,
        ZIndex = 10,
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Window.SettingsPanel
    })
    
    Create("UIStroke", {
        Color = Config.Theme.Divider,
        Thickness = 1,
        Parent = Window.SettingsPanel
    })
    
    local SettingsTitle = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "Themes",
        TextColor3 = Config.Theme.Text,
        TextSize = 13,
        Parent = Window.SettingsPanel
    })
    
    local ThemeContainer = Create("ScrollingFrame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 35),
        Size = UDim2.new(1, -10, 1, -40),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Config.Theme.Accent,
        Parent = Window.SettingsPanel
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 3),
        Parent = ThemeContainer
    })
    
    -- Theme buttons
    for themeName, themeColors in pairs(Themes) do
        local ThemeBtn = Create("TextButton", {
            BackgroundColor3 = themeColors.Element,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 28),
            Font = Enum.Font.Gotham,
            Text = themeName,
            TextColor3 = themeColors.Text,
            TextSize = 11,
            AutoButtonColor = false,
            Parent = ThemeContainer
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 5),
            Parent = ThemeBtn
        })
        
        local Accent = Create("Frame", {
            BackgroundColor3 = themeColors.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(1, -25, 0.5, -5),
            Size = UDim2.new(0, 10, 0, 10),
            Parent = ThemeBtn
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0.5, 0),
            Parent = Accent
        })
        
        ThemeBtn.MouseButton1Click:Connect(function()
            Window:SetTheme(themeName)
        end)
    end
    
    -- Settings toggle
    local settingsOpen = false
    SettingsBtn.MouseButton1Click:Connect(function()
        settingsOpen = not settingsOpen
        Window.SettingsPanel.Visible = settingsOpen
        
        if settingsOpen then
            Tween(Window.SettingsPanel, {Position = UDim2.new(1, -185, 0, 0)}, 0.3)
        else
            Tween(Window.SettingsPanel, {Position = UDim2.new(1, 10, 0, 0)}, 0.3)
            task.wait(0.3)
            Window.SettingsPanel.Visible = false
        end
    end)
    
    -- Minimize
    local minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            Tween(Window.Main, {Size = UDim2.new(0, 600, 0, 36)}, 0.3)
        else
            Tween(Window.Main, {Size = Config.WindowSize}, 0.3)
        end
    end)
    
    -- Close
    CloseBtn.MouseButton1Click:Connect(function()
        Window.GUI:Destroy()
    end)
    
    -- Draggable
    MakeDraggable(Window.Main, Window.TitleBar)
    
    -- Notification
    function Window:Notify(options)
        local Notif = Create("Frame", {
            BackgroundColor3 = Config.Theme.Element,
            BorderSizePixel = 0,
            Position = UDim2.new(1, 0, 1, 0),
            Size = UDim2.new(0, 250, 0, 70),
            Parent = Window.GUI
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = Notif
        })
        
        local Title = Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 8),
            Size = UDim2.new(1, -20, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = options.Title or "Notification",
            TextColor3 = Config.Theme.Text,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = Notif
        })
        
        local Content = Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 28),
            Size = UDim2.new(1, -20, 0, 30),
            Font = Enum.Font.Gotham,
            Text = options.Content or "",
            TextColor3 = Config.Theme.SubText,
            TextSize = 11,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            Parent = Notif
        })
        
        Tween(Notif, {Position = UDim2.new(1, -260, 1, -80)}, 0.3)
        
        task.wait(options.Duration or 3)
        
        Tween(Notif, {Position = UDim2.new(1, 0, 1, -80)}, 0.3)
        task.wait(0.3)
        Notif:Destroy()
    end
    
    -- Set theme
    function Window:SetTheme(themeName)
        local theme = Themes[themeName]
        if not theme then return end
        
        Config.Theme = theme
        Window.CurrentTheme = themeName
        
        -- Update colors
        Window.Main.BackgroundColor3 = theme.Background
        Window.TitleBar.BackgroundColor3 = theme.Element
        Window.Navigation.BackgroundColor3 = theme.Element
        Window.Navigation.ScrollBarImageColor3 = theme.Accent
        Window.Title.TextColor3 = theme.Text
        Window.SettingsPanel.BackgroundColor3 = theme.Background
        
        -- Update tabs
        for _, tab in pairs(Window.Tabs) do
            if tab and tab.Button then
                tab.Button.BackgroundColor3 = theme.Element
                tab.Label.TextColor3 = theme.SubText
                tab.Icon.TextColor3 = theme.SubText
            end
        end
        
        if Window.ActiveTab then
            Window.ActiveTab.Button.BackgroundColor3 = theme.ElementHover
            Window.ActiveTab.Label.TextColor3 = theme.Text
            Window.ActiveTab.Icon.TextColor3 = theme.Accent
        end
        
        Window:Notify({
            Title = "Theme Changed",
            Content = "Applied " .. themeName .. " theme",
            Duration = 2
        })
    end
    
    return Window
end

-- Create Tab
function Library:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 32),
        Text = "",
        AutoButtonColor = false,
        Parent = self.Navigation
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Tab.Button
    })
    
    Tab.Icon = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Enum.Font.Gotham,
        Text = icon or "📝",
        TextColor3 = Config.Theme.SubText,
        TextSize = 14,
        Parent = Tab.Button
    })
    
    Tab.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0.5, -8),
        Size = UDim2.new(1, -35, 0, 16),
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Tab.Button
    })
    
    -- Tab Page
    Tab.Page = Create("ScrollingFrame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Config.Theme.Accent,
        ScrollBarImageTransparency = 0.5,
        Visible = false,
        Parent = self.Content
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    -- Selection
    Tab.Button.MouseButton1Click:Connect(function()
        for _, t in pairs(self.Tabs) do
            if t and t.Page then
                t.Page.Visible = false
                Tween(t.Button, {BackgroundColor3 = Config.Theme.Element}, 0.2)
                Tween(t.Icon, {TextColor3 = Config.Theme.SubText}, 0.2)
                Tween(t.Label, {TextColor3 = Config.Theme.SubText}, 0.2)
            end
        end
        
        Tab.Page.Visible = true
        Tween(Tab.Button, {BackgroundColor3 = Config.Theme.ElementHover}, 0.2)
        Tween(Tab.Icon, {TextColor3 = Config.Theme.Accent}, 0.2)
        Tween(Tab.Label, {TextColor3 = Config.Theme.Text}, 0.2)
        
        self.ActiveTab = Tab
    end)
    
    -- Auto select first
    if not self.ActiveTab then
        Tab.Page.Visible = true
        Tab.Button.BackgroundColor3 = Config.Theme.ElementHover
        Tab.Icon.TextColor3 = Config.Theme.Accent
        Tab.Label.TextColor3 = Config.Theme.Text
        self.ActiveTab = Tab
    end
    
    table.insert(self.Tabs, Tab)
    return Tab
end

-- Add Section
function Library:AddSection(tab, name)
    local Section = {}
    
    Section.Container = Create("Frame", {
        BackgroundColor3 = Config.Theme.Element,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 30),
        Parent = tab.Page
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Section.Container
    })
    
    Section.Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Section.Container
    })
    
    Section.Content = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 30),
        Size = UDim2.new(1, -10, 1, -35),
        Parent = Section.Container
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Section.Content
    })
    
    Section.Content.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Section.Container.Size = UDim2.new(1, -10, 0, Section.Content.UIListLayout.AbsoluteContentSize.Y + 35)
    end)
    
    return Section
end

-- Add Button
function Library:AddButton(section, options)
    local Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 28),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Button",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        AutoButtonColor = false,
        Parent = section.Content
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = Button
    })
    
    Button.MouseEnter:Connect(function()
        Tween(Button, {BackgroundColor3 = Config.Theme.Accent, TextColor3 = Color3.fromRGB(255, 255, 255)}, 0.15)
    end)
    
    Button.MouseLeave:Connect(function()
        Tween(Button, {BackgroundColor3 = Config.Theme.ElementHover, TextColor3 = Config.Theme.Text}, 0.15)
    end)
    
    Button.MouseButton1Click:Connect(function()
        if options.Callback then
            options.Callback()
        end
    end)
    
    return Button
end

-- Add Toggle
function Library:AddToggle(section, options)
    local Toggle = {}
    Toggle.State = options.Default or false
    
    local Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Parent = section.Content
    })
    
    local Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 0),
        Size = UDim2.new(1, -45, 1, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Toggle",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Container
    })
    
    local Switch = Create("Frame", {
        BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.ElementHover,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -38, 0.5, -9),
        Size = UDim2.new(0, 34, 0, 18),
        Parent = Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 9),
        Parent = Switch
    })
    
    local Knob = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7),
        Size = UDim2.new(0, 14, 0, 14),
        Parent = Switch
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 7),
        Parent = Knob
    })
    
    local Button = Create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = Container
    })
    
    Button.MouseButton1Click:Connect(function()
        Toggle.State = not Toggle.State
        Tween(Switch, {BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.ElementHover}, 0.2)
        Tween(Knob, {Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7)}, 0.2)
        
        if options.Callback then
            options.Callback(Toggle.State)
        end
    end)
    
    return Toggle
end

-- Add all other components (Slider, Dropdown, Input) following same pattern...

return Library
