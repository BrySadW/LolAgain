-- Sigma UI Library | Advanced UI Framework
-- Version: 1.0.0
-- Author: Sigma Development

local SigmaUI = {}
SigmaUI.__index = SigmaUI

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- UI Configuration
local UIConfig = {
    Theme = "Dark", -- Dark, Light, Midnight, Ocean, Sunset
    AnimationSpeed = 0.3,
    Font = Enum.Font.Gotham,
    TextSize = 14,
    CornerRadius = 8,
    AccentColor = Color3.fromRGB(138, 43, 226), -- Blueviolet
    Themes = {
        Dark = {
            Background = Color3.fromRGB(25, 25, 25),
            Secondary = Color3.fromRGB(35, 35, 35),
            Tertiary = Color3.fromRGB(45, 45, 45),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(150, 150, 150),
            Accent = Color3.fromRGB(138, 43, 226),
            Success = Color3.fromRGB(46, 204, 113),
            Warning = Color3.fromRGB(241, 196, 15),
            Error = Color3.fromRGB(231, 76, 60)
        },
        Light = {
            Background = Color3.fromRGB(245, 245, 245),
            Secondary = Color3.fromRGB(235, 235, 235),
            Tertiary = Color3.fromRGB(225, 225, 225),
            Text = Color3.fromRGB(25, 25, 25),
            TextDark = Color3.fromRGB(100, 100, 100),
            Accent = Color3.fromRGB(138, 43, 226),
            Success = Color3.fromRGB(46, 204, 113),
            Warning = Color3.fromRGB(241, 196, 15),
            Error = Color3.fromRGB(231, 76, 60)
        },
        Midnight = {
            Background = Color3.fromRGB(15, 15, 25),
            Secondary = Color3.fromRGB(20, 20, 35),
            Tertiary = Color3.fromRGB(25, 25, 45),
            Text = Color3.fromRGB(200, 200, 255),
            TextDark = Color3.fromRGB(120, 120, 180),
            Accent = Color3.fromRGB(100, 100, 255),
            Success = Color3.fromRGB(46, 204, 113),
            Warning = Color3.fromRGB(241, 196, 15),
            Error = Color3.fromRGB(231, 76, 60)
        },
        Ocean = {
            Background = Color3.fromRGB(20, 30, 40),
            Secondary = Color3.fromRGB(25, 40, 55),
            Tertiary = Color3.fromRGB(30, 50, 70),
            Text = Color3.fromRGB(200, 220, 240),
            TextDark = Color3.fromRGB(120, 140, 160),
            Accent = Color3.fromRGB(0, 150, 200),
            Success = Color3.fromRGB(46, 204, 113),
            Warning = Color3.fromRGB(241, 196, 15),
            Error = Color3.fromRGB(231, 76, 60)
        },
        Sunset = {
            Background = Color3.fromRGB(40, 25, 20),
            Secondary = Color3.fromRGB(55, 35, 25),
            Tertiary = Color3.fromRGB(70, 45, 30),
            Text = Color3.fromRGB(255, 230, 200),
            TextDark = Color3.fromRGB(180, 150, 120),
            Accent = Color3.fromRGB(255, 100, 50),
            Success = Color3.fromRGB(46, 204, 113),
            Warning = Color3.fromRGB(241, 196, 15),
            Error = Color3.fromRGB(231, 76, 60)
        }
    }
}

-- Utility Functions
local function GetTheme()
    return UIConfig.Themes[UIConfig.Theme]
end

local function Tween(object, properties, duration)
    duration = duration or UIConfig.AnimationSpeed
    local tween = TweenService:Create(
        object,
        TweenInfo.new(duration, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function CreateInstance(class, properties, children)
    local instance = Instance.new(class)
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    for _, child in pairs(children or {}) do
        child.Parent = instance
    end
    return instance
end

local function AddDraggable(frame)
    local dragging = false
    local dragStart = nil
    local startPos = nil

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Tween(frame, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            }, 0.1)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

local function Ripple(button)
    local ripple = CreateInstance("Frame", {
        Name = "Ripple",
        Parent = button,
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 0.7,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 0, 0, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = button.ZIndex + 1
    })

    CreateInstance("UICorner", {
        Parent = ripple,
        CornerRadius = UDim.new(1, 0)
    })

    Tween(ripple, {
        Size = UDim2.new(2, 0, 2, 0),
        BackgroundTransparency = 1
    }, 0.5)

    game:GetService("Debris"):AddItem(ripple, 0.5)
end

-- Window Class
function SigmaUI:CreateWindow(config)
    config = config or {}
    local Window = {}
    
    -- Create Main GUI
    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "SigmaUI_" .. HttpService:GenerateGUID(false),
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })

    -- Main Frame
    local MainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = GetTheme().Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -300, 0.5, -200),
        Size = UDim2.new(0, 600, 0, 400),
        ClipsDescendants = true
    })

    CreateInstance("UICorner", {
        Parent = MainFrame,
        CornerRadius = UDim.new(0, UIConfig.CornerRadius)
    })

    -- Shadow
    local Shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -15, 0, -15),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = 0,
        Image = "rbxasset://textures/ui/GuiImagePlaceholder.png",
        ImageColor3 = Color3.new(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 10, 10)
    })

    -- Title Bar
    local TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Parent = MainFrame,
        BackgroundColor3 = GetTheme().Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 35)
    })

    local Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.5, -10, 1, 0),
        Font = UIConfig.Font,
        Text = config.Title or "Sigma UI",
        TextColor3 = GetTheme().Text,
        TextScaled = false,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    -- Control Buttons
    local ControlsFrame = CreateInstance("Frame", {
        Name = "Controls",
        Parent = TitleBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -100, 0, 5),
        Size = UDim2.new(0, 95, 0, 25)
    })

    -- Minimize Button
    local MinimizeButton = CreateInstance("TextButton", {
        Name = "Minimize",
        Parent = ControlsFrame,
        BackgroundColor3 = GetTheme().Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Font = UIConfig.Font,
        Text = "−",
        TextColor3 = GetTheme().Text,
        TextSize = 18
    })

    CreateInstance("UICorner", {
        Parent = MinimizeButton,
        CornerRadius = UDim.new(0, 4)
    })

    -- Settings Button
    local SettingsButton = CreateInstance("TextButton", {
        Name = "Settings",
        Parent = ControlsFrame,
        BackgroundColor3 = GetTheme().Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 35, 0, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Font = UIConfig.Font,
        Text = "⚙",
        TextColor3 = GetTheme().Text,
        TextSize = 16
    })

    CreateInstance("UICorner", {
        Parent = SettingsButton,
        CornerRadius = UDim.new(0, 4)
    })

    -- Close Button
    local CloseButton = CreateInstance("TextButton", {
        Name = "Close",
        Parent = ControlsFrame,
        BackgroundColor3 = GetTheme().Error,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 70, 0, 0),
        Size = UDim2.new(0, 25, 0, 25),
        Font = UIConfig.Font,
        Text = "×",
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 18
    })

    CreateInstance("UICorner", {
        Parent = CloseButton,
        CornerRadius = UDim.new(0, 4)
    })

    -- Tab Container
    local TabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        Parent = MainFrame,
        BackgroundColor3 = GetTheme().Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 35),
        Size = UDim2.new(0, 150, 1, -35)
    })

    local TabList = CreateInstance("ScrollingFrame", {
        Name = "TabList",
        Parent = TabContainer,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 5),
        Size = UDim2.new(1, -10, 1, -10),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = GetTheme().Accent
    })

    CreateInstance("UIListLayout", {
        Parent = TabList,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })

    -- Content Container
    local ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 35),
        Size = UDim2.new(1, -150, 1, -35)
    })

    -- Settings Panel
    local SettingsPanel = CreateInstance("Frame", {
        Name = "SettingsPanel",
        Parent = MainFrame,
        BackgroundColor3 = GetTheme().Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 0, 0, 35),
        Size = UDim2.new(0, 200, 1, -35),
        Visible = false
    })

    local SettingsTitle = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = SettingsPanel,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 0, 30),
        Font = UIConfig.Font,
        Text = "Settings",
        TextColor3 = GetTheme().Text,
        TextSize = 18
    })

    local ThemeLabel = CreateInstance("TextLabel", {
        Name = "ThemeLabel",
        Parent = SettingsPanel,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 50),
        Size = UDim2.new(1, -20, 0, 20),
        Font = UIConfig.Font,
        Text = "Theme:",
        TextColor3 = GetTheme().TextDark,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local ThemeDropdown = CreateInstance("Frame", {
        Name = "ThemeDropdown",
        Parent = SettingsPanel,
        BackgroundColor3 = GetTheme().Tertiary,
        Position = UDim2.new(0, 10, 0, 75),
        Size = UDim2.new(1, -20, 0, 30)
    })

    CreateInstance("UICorner", {
        Parent = ThemeDropdown,
        CornerRadius = UDim.new(0, 4)
    })

    local ThemeButton = CreateInstance("TextButton", {
        Name = "Button",
        Parent = ThemeDropdown,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = UIConfig.Font,
        Text = UIConfig.Theme,
        TextColor3 = GetTheme().Text,
        TextSize = 14
    })

    -- Control Button Functions
    MinimizeButton.MouseButton1Click:Connect(function()
        Ripple(MinimizeButton)
        local isMinimized = ContentContainer.Visible
        ContentContainer.Visible = not isMinimized
        TabContainer.Visible = not isMinimized
        
        if isMinimized then
            Tween(MainFrame, {Size = UDim2.new(0, 600, 0, 400)})
        else
            Tween(MainFrame, {Size = UDim2.new(0, 600, 0, 35)})
        end
    end)

    SettingsButton.MouseButton1Click:Connect(function()
        Ripple(SettingsButton)
        SettingsPanel.Visible = not SettingsPanel.Visible
        
        if SettingsPanel.Visible then
            Tween(SettingsPanel, {Position = UDim2.new(1, -200, 0, 35)})
        else
            Tween(SettingsPanel, {Position = UDim2.new(1, 0, 0, 35)})
        end
    end)

    CloseButton.MouseButton1Click:Connect(function()
        Ripple(CloseButton)
        Tween(MainFrame, {Size = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 1}, 0.3)
        wait(0.3)
        ScreenGui:Destroy()
    end)

    -- Theme Dropdown
    local themeDropdownOpen = false
    local themeOptions = CreateInstance("Frame", {
        Name = "Options",
        Parent = ThemeDropdown,
        BackgroundColor3 = GetTheme().Tertiary,
        Position = UDim2.new(0, 0, 1, 5),
        Size = UDim2.new(1, 0, 0, 0),
        Visible = false,
        ClipsDescendants = true
    })

    CreateInstance("UICorner", {
        Parent = themeOptions,
        CornerRadius = UDim.new(0, 4)
    })

    CreateInstance("UIListLayout", {
        Parent = themeOptions,
        SortOrder = Enum.SortOrder.LayoutOrder
    })

    for themeName, _ in pairs(UIConfig.Themes) do
        local option = CreateInstance("TextButton", {
            Parent = themeOptions,
            BackgroundColor3 = GetTheme().Tertiary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 25),
            Font = UIConfig.Font,
            Text = themeName,
            TextColor3 = GetTheme().Text,
            TextSize = 14
        })

        option.MouseEnter:Connect(function()
            Tween(option, {BackgroundColor3 = GetTheme().Accent}, 0.2)
        end)

        option.MouseLeave:Connect(function()
            Tween(option, {BackgroundColor3 = GetTheme().Tertiary}, 0.2)
        end)

        option.MouseButton1Click:Connect(function()
            UIConfig.Theme = themeName
            ThemeButton.Text = themeName
            Window:UpdateTheme()
            themeOptions.Visible = false
            themeDropdownOpen = false
            Tween(themeOptions, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
        end)
    end

    ThemeButton.MouseButton1Click:Connect(function()
        themeDropdownOpen = not themeDropdownOpen
        themeOptions.Visible = themeDropdownOpen
        
        if themeDropdownOpen then
            Tween(themeOptions, {Size = UDim2.new(1, 0, 0, #themeOptions:GetChildren() * 25)}, 0.2)
        else
            Tween(themeOptions, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
        end
    end)

    -- Make window draggable
    AddDraggable(MainFrame)

    -- Tab System
    local Tabs = {}
    local ActiveTab = nil

    function Window:CreateTab(name, icon)
        local Tab = {}
        
        local TabButton = CreateInstance("TextButton", {
            Name = name,
            Parent = TabList,
            BackgroundColor3 = GetTheme().Tertiary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 35),
            Font = UIConfig.Font,
            Text = (icon and icon .. "  " or "") .. name,
            TextColor3 = GetTheme().TextDark,
            TextSize = 14
        })

        CreateInstance("UICorner", {
            Parent = TabButton,
            CornerRadius = UDim.new(0, 6)
        })

        local TabContent = CreateInstance("ScrollingFrame", {
            Name = name .. "Content",
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(1, -20, 1, -20),
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = GetTheme().Accent,
            Visible = false
        })

        CreateInstance("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })

        TabButton.MouseButton1Click:Connect(function()
            Ripple(TabButton)
            
            if ActiveTab then
                ActiveTab.button.BackgroundColor3 = GetTheme().Tertiary
                ActiveTab.button.TextColor3 = GetTheme().TextDark
                ActiveTab.content.Visible = false
            end
            
            TabButton.BackgroundColor3 = GetTheme().Accent
            TabButton.TextColor3 = Color3.new(1, 1, 1)
            TabContent.Visible = true
            
            ActiveTab = {button = TabButton, content = TabContent}
        end)

        -- Auto-select first tab
        if not ActiveTab then
            TabButton.BackgroundColor3 = GetTheme().Accent
            TabButton.TextColor3 = Color3.new(1, 1, 1)
            TabContent.Visible = true
            ActiveTab = {button = TabButton, content = TabContent}
        end

        -- Section Functions
        function Tab:CreateSection(title)
            local Section = {}
            
            local SectionFrame = CreateInstance("Frame", {
                Name = title,
                Parent = TabContent,
                BackgroundColor3 = GetTheme().Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 40)
            })

            CreateInstance("UICorner", {
                Parent = SectionFrame,
                CornerRadius = UDim.new(0, 6)
            })

            local SectionTitle = CreateInstance("TextLabel", {
                Name = "Title",
                Parent = SectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 5),
                Size = UDim2.new(1, -20, 0, 25),
                Font = UIConfig.Font,
                Text = title,
                TextColor3 = GetTheme().Text,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local SectionContent = CreateInstance("Frame", {
                Name = "Content",
                Parent = SectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 35),
                Size = UDim2.new(1, -20, 0, 0)
            })

            CreateInstance("UIListLayout", {
                Parent = SectionContent,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8)
            })

            local function UpdateSize()
                local contentSize = 40
                for _, child in pairs(SectionContent:GetChildren()) do
                    if child:IsA("Frame") then
                        contentSize = contentSize + child.Size.Y.Offset + 8
                    end
                end
                SectionFrame.Size = UDim2.new(1, 0, 0, contentSize)
            end

            -- Label
            function Section:CreateLabel(text)
                local LabelFrame = CreateInstance("Frame", {
                    Name = "Label",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20)
                })

                local Label = CreateInstance("TextLabel", {
                    Parent = LabelFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().TextDark,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                UpdateSize()
                return Label
            end

            -- Button
            function Section:CreateButton(text, callback)
                local ButtonFrame = CreateInstance("Frame", {
                    Name = "Button",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 32)
                })

                local Button = CreateInstance("TextButton", {
                    Parent = ButtonFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14
                })

                CreateInstance("UICorner", {
                    Parent = Button,
                    CornerRadius = UDim.new(0, 6)
                })

                Button.MouseEnter:Connect(function()
                    Tween(Button, {BackgroundColor3 = GetTheme().Accent}, 0.2)
                end)

                Button.MouseLeave:Connect(function()
                    Tween(Button, {BackgroundColor3 = GetTheme().Tertiary}, 0.2)
                end)

                Button.MouseButton1Click:Connect(function()
                    Ripple(Button)
                    if callback then callback() end
                end)

                UpdateSize()
                return Button
            end

            -- Toggle
            function Section:CreateToggle(text, default, callback)
                local ToggleFrame = CreateInstance("Frame", {
                    Name = "Toggle",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 25)
                })

                local ToggleLabel = CreateInstance("TextLabel", {
                    Parent = ToggleFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local ToggleButton = CreateInstance("Frame", {
                    Parent = ToggleFrame,
                    BackgroundColor3 = default and GetTheme().Accent or GetTheme().Tertiary,
                    Position = UDim2.new(1, -45, 0.5, -10),
                    Size = UDim2.new(0, 40, 0, 20)
                })

                CreateInstance("UICorner", {
                    Parent = ToggleButton,
                    CornerRadius = UDim.new(1, 0)
                })

                local ToggleCircle = CreateInstance("Frame", {
                    Parent = ToggleButton,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16)
                })

                CreateInstance("UICorner", {
                    Parent = ToggleCircle,
                    CornerRadius = UDim.new(1, 0)
                })

                local toggled = default or false

                local ToggleBtn = CreateInstance("TextButton", {
                    Parent = ToggleButton,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = ""
                })

                ToggleBtn.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    
                    Tween(ToggleButton, {
                        BackgroundColor3 = toggled and GetTheme().Accent or GetTheme().Tertiary
                    }, 0.2)
                    
                    Tween(ToggleCircle, {
                        Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                    }, 0.2)
                    
                    if callback then callback(toggled) end
                end)

                UpdateSize()
                return {Toggle = ToggleBtn, Value = function() return toggled end}
            end

            -- Slider
            function Section:CreateSlider(text, min, max, default, callback)
                local SliderFrame = CreateInstance("Frame", {
                    Name = "Slider",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })

                local SliderLabel = CreateInstance("TextLabel", {
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -50, 0, 20),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local SliderValue = CreateInstance("TextLabel", {
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -45, 0, 0),
                    Size = UDim2.new(0, 45, 0, 20),
                    Font = UIConfig.Font,
                    Text = tostring(default),
                    TextColor3 = GetTheme().Accent,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local SliderBar = CreateInstance("Frame", {
                    Parent = SliderFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    Position = UDim2.new(0, 0, 0, 30),
                    Size = UDim2.new(1, 0, 0, 4)
                })

                CreateInstance("UICorner", {
                    Parent = SliderBar,
                    CornerRadius = UDim.new(1, 0)
                })

                local SliderFill = CreateInstance("Frame", {
                    Parent = SliderBar,
                    BackgroundColor3 = GetTheme().Accent,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                })

                CreateInstance("UICorner", {
                    Parent = SliderFill,
                    CornerRadius = UDim.new(1, 0)
                })

                local SliderButton = CreateInstance("Frame", {
                    Parent = SliderBar,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16)
                })

                CreateInstance("UICorner", {
                    Parent = SliderButton,
                    CornerRadius = UDim.new(1, 0)
                })

                local dragging = false
                local value = default

                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)

                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = mousePos.X - SliderBar.AbsolutePosition.X
                        local percentage = math.clamp(relativePos / SliderBar.AbsoluteSize.X, 0, 1)
                        
                        value = math.floor(min + (max - min) * percentage)
                        SliderValue.Text = tostring(value)
                        
                        Tween(SliderButton, {Position = UDim2.new(percentage, -8, 0.5, -8)}, 0.1)
                        Tween(SliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
                        
                        if callback then callback(value) end
                    end
                end)

                UpdateSize()
                return {Value = function() return value end}
            end

            -- Input
            function Section:CreateInput(text, placeholder, callback)
                local InputFrame = CreateInstance("Frame", {
                    Name = "Input",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 55)
                })

                local InputLabel = CreateInstance("TextLabel", {
                    Parent = InputFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local InputBox = CreateInstance("TextBox", {
                    Parent = InputFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = UIConfig.Font,
                    PlaceholderText = placeholder,
                    PlaceholderColor3 = GetTheme().TextDark,
                    Text = "",
                    TextColor3 = GetTheme().Text,
                    TextSize = 14
                })

                CreateInstance("UICorner", {
                    Parent = InputBox,
                    CornerRadius = UDim.new(0, 6)
                })

                InputBox.FocusLost:Connect(function(enterPressed)
                    if callback then callback(InputBox.Text, enterPressed) end
                end)

                UpdateSize()
                return InputBox
            end

            -- Dropdown
            function Section:CreateDropdown(text, options, default, callback)
                local DropdownFrame = CreateInstance("Frame", {
                    Name = "Dropdown",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 55)
                })

                local DropdownLabel = CreateInstance("TextLabel", {
                    Parent = DropdownFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local DropdownButton = CreateInstance("TextButton", {
                    Parent = DropdownFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = UIConfig.Font,
                    Text = default or "Select...",
                    TextColor3 = GetTheme().Text,
                    TextSize = 14
                })

                CreateInstance("UICorner", {
                    Parent = DropdownButton,
                    CornerRadius = UDim.new(0, 6)
                })

                local DropdownArrow = CreateInstance("TextLabel", {
                    Parent = DropdownButton,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -25, 0, 0),
                    Size = UDim2.new(0, 25, 1, 0),
                    Font = UIConfig.Font,
                    Text = "▼",
                    TextColor3 = GetTheme().TextDark,
                    TextSize = 12
                })

                local DropdownList = CreateInstance("Frame", {
                    Parent = DropdownFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    Position = UDim2.new(0, 0, 0, 60),
                    Size = UDim2.new(1, 0, 0, 0),
                    Visible = false,
                    ClipsDescendants = true,
                    ZIndex = 10
                })

                CreateInstance("UICorner", {
                    Parent = DropdownList,
                    CornerRadius = UDim.new(0, 6)
                })

                CreateInstance("UIListLayout", {
                    Parent = DropdownList,
                    SortOrder = Enum.SortOrder.LayoutOrder
                })

                local isOpen = false
                local selected = default

                for _, option in pairs(options) do
                    local OptionButton = CreateInstance("TextButton", {
                        Parent = DropdownList,
                        BackgroundColor3 = GetTheme().Tertiary,
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, 0, 0, 25),
                        Font = UIConfig.Font,
                        Text = option,
                        TextColor3 = GetTheme().Text,
                        TextSize = 14,
                        ZIndex = 11
                    })

                    OptionButton.MouseEnter:Connect(function()
                        Tween(OptionButton, {BackgroundColor3 = GetTheme().Accent}, 0.2)
                    end)

                    OptionButton.MouseLeave:Connect(function()
                        Tween(OptionButton, {BackgroundColor3 = GetTheme().Tertiary}, 0.2)
                    end)

                    OptionButton.MouseButton1Click:Connect(function()
                        selected = option
                        DropdownButton.Text = option
                        isOpen = false
                        DropdownList.Visible = false
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 55)}, 0.2)
                        Tween(DropdownArrow, {Rotation = 0}, 0.2)
                        UpdateSize()
                        if callback then callback(option) end
                    end)
                end

                DropdownButton.MouseButton1Click:Connect(function()
                    isOpen = not isOpen
                    DropdownList.Visible = isOpen
                    
                    if isOpen then
                        local listHeight = #options * 25
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, listHeight)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 60 + listHeight)}, 0.2)
                        Tween(DropdownArrow, {Rotation = 180}, 0.2)
                    else
                        Tween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 55)}, 0.2)
                        Tween(DropdownArrow, {Rotation = 0}, 0.2)
                    end
                    UpdateSize()
                end)

                UpdateSize()
                return {Value = function() return selected end}
            end

            -- Keybind
            function Section:CreateKeybind(text, default, callback)
                local KeybindFrame = CreateInstance("Frame", {
                    Name = "Keybind",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 25)
                })

                local KeybindLabel = CreateInstance("TextLabel", {
                    Parent = KeybindFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -80, 1, 0),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local KeybindButton = CreateInstance("TextButton", {
                    Parent = KeybindFrame,
                    BackgroundColor3 = GetTheme().Tertiary,
                    Position = UDim2.new(1, -75, 0, 0),
                    Size = UDim2.new(0, 75, 1, 0),
                    Font = UIConfig.Font,
                    Text = default and default.Name or "None",
                    TextColor3 = GetTheme().Text,
                    TextSize = 14
                })

                CreateInstance("UICorner", {
                    Parent = KeybindButton,
                    CornerRadius = UDim.new(0, 6)
                })

                local listening = false
                local keybind = default

                KeybindButton.MouseButton1Click:Connect(function()
                    listening = true
                    KeybindButton.Text = "..."
                    KeybindButton.TextColor3 = GetTheme().Accent
                end)

                UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if listening and not gameProcessed then
                        if input.KeyCode ~= Enum.KeyCode.Unknown then
                            keybind = input.KeyCode
                            KeybindButton.Text = keybind.Name
                            KeybindButton.TextColor3 = GetTheme().Text
                            listening = false
                            if callback then callback(keybind) end
                        end
                    elseif keybind and input.KeyCode == keybind and not gameProcessed then
                        if callback then callback(keybind, true) end
                    end
                end)

                UpdateSize()
                return {Key = function() return keybind end}
            end

            -- Color Picker
            function Section:CreateColorPicker(text, default, callback)
                local ColorPickerFrame = CreateInstance("Frame", {
                    Name = "ColorPicker",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 25)
                })

                local ColorPickerLabel = CreateInstance("TextLabel", {
                    Parent = ColorPickerFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -35, 1, 0),
                    Font = UIConfig.Font,
                    Text = text,
                    TextColor3 = GetTheme().Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local ColorDisplay = CreateInstance("Frame", {
                    Parent = ColorPickerFrame,
                    BackgroundColor3 = default or Color3.new(1, 1, 1),
                    Position = UDim2.new(1, -30, 0.5, -10),
                    Size = UDim2.new(0, 20, 0, 20)
                })

                CreateInstance("UICorner", {
                    Parent = ColorDisplay,
                    CornerRadius = UDim.new(0, 4)
                })

                CreateInstance("UIStroke", {
                    Parent = ColorDisplay,
                    Color = GetTheme().Tertiary,
                    Thickness = 2
                })

                local ColorButton = CreateInstance("TextButton", {
                    Parent = ColorDisplay,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = ""
                })

                -- Color Picker Window
                local pickerOpen = false
                local currentColor = default or Color3.new(1, 1, 1)

                ColorButton.MouseButton1Click:Connect(function()
                    if pickerOpen then return end
                    pickerOpen = true

                    local ColorPickerWindow = CreateInstance("Frame", {
                        Parent = MainFrame,
                        BackgroundColor3 = GetTheme().Background,
                        Position = UDim2.new(0.5, -150, 0.5, -175),
                        Size = UDim2.new(0, 300, 0, 350),
                        ZIndex = 100
                    })

                    CreateInstance("UICorner", {
                        Parent = ColorPickerWindow,
                        CornerRadius = UDim.new(0, 8)
                    })

                    CreateInstance("UIStroke", {
                        Parent = ColorPickerWindow,
                        Color = GetTheme().Secondary,
                        Thickness = 2
                    })

                    local ColorPickerTitle = CreateInstance("TextLabel", {
                        Parent = ColorPickerWindow,
                        BackgroundColor3 = GetTheme().Secondary,
                        Size = UDim2.new(1, 0, 0, 30),
                        Font = UIConfig.Font,
                        Text = "Color Picker",
                        TextColor3 = GetTheme().Text,
                        TextSize = 14
                    })

                    local CloseColorPicker = CreateInstance("TextButton", {
                        Parent = ColorPickerTitle,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(1, -30, 0, 0),
                        Size = UDim2.new(0, 30, 1, 0),
                        Font = UIConfig.Font,
                        Text = "×",
                        TextColor3 = GetTheme().Text,
                        TextSize = 20
                    })

                    -- Color Wheel
                    local ColorWheel = CreateInstance("ImageLabel", {
                        Parent = ColorPickerWindow,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0.5, -75, 0, 40),
                        Size = UDim2.new(0, 150, 0, 150),
                        Image = "rbxasset://textures/ui/GuiImagePlaceholder.png" -- Replace with actual color wheel image
                    })

                    -- Brightness Slider
                    local BrightnessSlider = CreateInstance("Frame", {
                        Parent = ColorPickerWindow,
                        BackgroundColor3 = Color3.new(1, 1, 1),
                        Position = UDim2.new(0, 20, 0, 200),
                        Size = UDim2.new(1, -40, 0, 20)
                    })

                    CreateInstance("UIGradient", {
                        Parent = BrightnessSlider,
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)),
                            ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
                        }
                    })

                    CreateInstance("UICorner", {
                        Parent = BrightnessSlider,
                        CornerRadius = UDim.new(0, 4)
                    })

                    -- Hue Slider
                    local HueSlider = CreateInstance("Frame", {
                        Parent = ColorPickerWindow,
                        BackgroundColor3 = Color3.new(1, 1, 1),
                        Position = UDim2.new(0, 20, 0, 230),
                        Size = UDim2.new(1, -40, 0, 20)
                    })

                    CreateInstance("UIGradient", {
                        Parent = HueSlider,
                        Color = ColorSequence.new{
                            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                            ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                            ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                            ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                            ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                        }
                    })

                    CreateInstance("UICorner", {
                        Parent = HueSlider,
                        CornerRadius = UDim.new(0, 4)
                    })

                    -- Color Preview
                    local ColorPreview = CreateInstance("Frame", {
                        Parent = ColorPickerWindow,
                        BackgroundColor3 = currentColor,
                        Position = UDim2.new(0, 20, 0, 260),
                        Size = UDim2.new(0, 60, 0, 60)
                    })

                    CreateInstance("UICorner", {
                        Parent = ColorPreview,
                        CornerRadius = UDim.new(0, 6)
                    })

                    -- RGB Inputs
                    local RGBFrame = CreateInstance("Frame", {
                        Parent = ColorPickerWindow,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 100, 0, 260),
                        Size = UDim2.new(1, -120, 0, 60)
                    })

                    local function createRGBInput(name, position, value)
                        local container = CreateInstance("Frame", {
                            Parent = RGBFrame,
                            BackgroundTransparency = 1,
                            Position = position,
                            Size = UDim2.new(0.33, -5, 1, 0)
                        })

                        CreateInstance("TextLabel", {
                            Parent = container,
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 0, 15),
                            Font = UIConfig.Font,
                            Text = name,
                            TextColor3 = GetTheme().TextDark,
                            TextSize = 12
                        })

                        local input = CreateInstance("TextBox", {
                            Parent = container,
                            BackgroundColor3 = GetTheme().Tertiary,
                            Position = UDim2.new(0, 0, 0, 20),
                            Size = UDim2.new(1, 0, 0, 25),
                            Font = UIConfig.Font,
                            Text = tostring(math.floor(value * 255)),
                            TextColor3 = GetTheme().Text,
                            TextSize = 12
                        })

                        CreateInstance("UICorner", {
                            Parent = input,
                            CornerRadius = UDim.new(0, 4)
                        })

                        return input
                    end

                    local RInput = createRGBInput("R", UDim2.new(0, 0, 0, 0), currentColor.R)
                    local GInput = createRGBInput("G", UDim2.new(0.33, 5, 0, 0), currentColor.G)
                    local BInput = createRGBInput("B", UDim2.new(0.67, 10, 0, 0), currentColor.B)

                    -- Apply Button
                    local ApplyButton = CreateInstance("TextButton", {
                        Parent = ColorPickerWindow,
                        BackgroundColor3 = GetTheme().Accent,
                        Position = UDim2.new(0.5, -40, 1, -35),
                        Size = UDim2.new(0, 80, 0, 25),
                        Font = UIConfig.Font,
                        Text = "Apply",
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 14
                    })

                    CreateInstance("UICorner", {
                        Parent = ApplyButton,
                        CornerRadius = UDim.new(0, 6)
                    })

                    local function updateColor()
                        local r = tonumber(RInput.Text) or 0
                        local g = tonumber(GInput.Text) or 0
                        local b = tonumber(BInput.Text) or 0
                        
                        r = math.clamp(r, 0, 255) / 255
                        g = math.clamp(g, 0, 255) / 255
                        b = math.clamp(b, 0, 255) / 255
                        
                        currentColor = Color3.new(r, g, b)
                        ColorPreview.BackgroundColor3 = currentColor
                    end

                    RInput.FocusLost:Connect(updateColor)
                    GInput.FocusLost:Connect(updateColor)
                    BInput.FocusLost:Connect(updateColor)

                    ApplyButton.MouseButton1Click:Connect(function()
                        ColorDisplay.BackgroundColor3 = currentColor
                        if callback then callback(currentColor) end
                        ColorPickerWindow:Destroy()
                        pickerOpen = false
                    end)

                    CloseColorPicker.MouseButton1Click:Connect(function()
                        ColorPickerWindow:Destroy()
                        pickerOpen = false
                    end)

                    AddDraggable(ColorPickerWindow)
                end)

                UpdateSize()
                return {Color = function() return currentColor end}
            end

            return Section
        end

        table.insert(Tabs, Tab)
        return Tab
    end

    -- Update Theme Function
    function Window:UpdateTheme()
        local theme = GetTheme()
        
        -- Update all UI elements with new theme
        local function updateColors(instance)
            if instance:IsA("Frame") then
                if instance.BackgroundColor3 == UIConfig.Themes[UIConfig.Theme].Background then
                    instance.BackgroundColor3 = theme.Background
                elseif instance.BackgroundColor3 == UIConfig.Themes[UIConfig.Theme].Secondary then
                    instance.BackgroundColor3 = theme.Secondary
                elseif instance.BackgroundColor3 == UIConfig.Themes[UIConfig.Theme].Tertiary then
                    instance.BackgroundColor3 = theme.Tertiary
                end
            elseif instance:IsA("TextLabel") or instance:IsA("TextButton") or instance:IsA("TextBox") then
                if instance.TextColor3 == UIConfig.Themes[UIConfig.Theme].Text then
                    instance.TextColor3 = theme.Text
                elseif instance.TextColor3 == UIConfig.Themes[UIConfig.Theme].TextDark then
                    instance.TextColor3 = theme.TextDark
                end
            end
            
            for _, child in pairs(instance:GetChildren()) do
                updateColors(child)
            end
        end
        
        updateColors(MainFrame)
    end

    -- Notification System
    function Window:Notify(config)
        config = config or {}
        
        local NotificationFrame = CreateInstance("Frame", {
            Parent = ScreenGui,
            BackgroundColor3 = GetTheme().Secondary,
            Position = UDim2.new(1, 0, 1, -100),
            Size = UDim2.new(0, 300, 0, 80),
            ClipsDescendants = true
        })

        CreateInstance("UICorner", {
            Parent = NotificationFrame,
            CornerRadius = UDim.new(0, 8)
        })

        local NotificationIcon = CreateInstance("TextLabel", {
            Parent = NotificationFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, -15),
            Size = UDim2.new(0, 30, 0, 30),
            Font = UIConfig.Font,
            Text = config.Icon or "ℹ",
            TextColor3 = config.Color or GetTheme().Accent,
            TextSize = 24
        })

        local NotificationTitle = CreateInstance("TextLabel", {
            Parent = NotificationFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 50, 0, 10),
            Size = UDim2.new(1, -60, 0, 25),
            Font = UIConfig.Font,
            Text = config.Title or "Notification",
            TextColor3 = GetTheme().Text,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local NotificationContent = CreateInstance("TextLabel", {
            Parent = NotificationFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 50, 0, 35),
            Size = UDim2.new(1, -60, 0, 35),
            Font = UIConfig.Font,
            Text = config.Content or "",
            TextColor3 = GetTheme().TextDark,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })

        -- Slide in
        Tween(NotificationFrame, {Position = UDim2.new(1, -310, 1, -100)}, 0.5)
        
        -- Auto dismiss
        task.wait(config.Duration or 3)
        
        -- Slide out
        Tween(NotificationFrame, {Position = UDim2.new(1, 0, 1, -100)}, 0.5)
        task.wait(0.5)
        NotificationFrame:Destroy()
    end

    return Window
end

return SigmaUI
