-- Sigma UI Library v5.0
-- Beautiful, Animated, Professional

local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

-- Beautiful Themes
local Themes = {
    Dark = {
        Background = Color3.fromRGB(20, 20, 20),
        Secondary = Color3.fromRGB(25, 25, 25),
        Tertiary = Color3.fromRGB(30, 30, 30),
        Accent = Color3.fromRGB(64, 150, 255),
        Text = Color3.fromRGB(245, 245, 245),
        SubText = Color3.fromRGB(145, 145, 145)
    },
    Ocean = {
        Background = Color3.fromRGB(17, 21, 28),
        Secondary = Color3.fromRGB(22, 27, 35),
        Tertiary = Color3.fromRGB(27, 33, 43),
        Accent = Color3.fromRGB(79, 172, 254),
        Text = Color3.fromRGB(210, 220, 230),
        SubText = Color3.fromRGB(145, 155, 165)
    },
    Midnight = {
        Background = Color3.fromRGB(18, 18, 24),
        Secondary = Color3.fromRGB(23, 23, 31),
        Tertiary = Color3.fromRGB(28, 28, 38),
        Accent = Color3.fromRGB(136, 96, 250),
        Text = Color3.fromRGB(235, 235, 245),
        SubText = Color3.fromRGB(145, 145, 160)
    },
    Rose = {
        Background = Color3.fromRGB(24, 18, 18),
        Secondary = Color3.fromRGB(31, 23, 23),
        Tertiary = Color3.fromRGB(38, 28, 28),
        Accent = Color3.fromRGB(236, 72, 153),
        Text = Color3.fromRGB(245, 235, 235),
        SubText = Color3.fromRGB(160, 145, 145)
    },
    Aqua = {
        Background = Color3.fromRGB(18, 24, 22),
        Secondary = Color3.fromRGB(23, 31, 28),
        Tertiary = Color3.fromRGB(28, 38, 34),
        Accent = Color3.fromRGB(72, 236, 185),
        Text = Color3.fromRGB(235, 245, 240),
        SubText = Color3.fromRGB(145, 160, 155)
    },
    Sunset = {
        Background = Color3.fromRGB(24, 20, 18),
        Secondary = Color3.fromRGB(31, 26, 23),
        Tertiary = Color3.fromRGB(38, 32, 28),
        Accent = Color3.fromRGB(255, 140, 66),
        Text = Color3.fromRGB(245, 240, 235),
        SubText = Color3.fromRGB(160, 150, 145)
    },
    Forest = {
        Background = Color3.fromRGB(18, 22, 18),
        Secondary = Color3.fromRGB(23, 28, 23),
        Tertiary = Color3.fromRGB(28, 34, 28),
        Accent = Color3.fromRGB(106, 196, 106),
        Text = Color3.fromRGB(235, 240, 235),
        SubText = Color3.fromRGB(145, 155, 145)
    },
    Purple = {
        Background = Color3.fromRGB(22, 18, 24),
        Secondary = Color3.fromRGB(28, 23, 31),
        Tertiary = Color3.fromRGB(34, 28, 38),
        Accent = Color3.fromRGB(156, 106, 250),
        Text = Color3.fromRGB(240, 235, 245),
        SubText = Color3.fromRGB(155, 145, 160)
    }
}

local Config = {
    Theme = Themes.Dark,
    WindowSize = UDim2.new(0, 620, 0, 360),
    AnimSpeed = 0.3
}

-- Utilities
local function Create(class, properties)
    local instance = Instance.new(class)
    for k, v in pairs(properties or {}) do
        if k ~= "Parent" then
            instance[k] = v
        end
    end
    if properties and properties.Parent then
        instance.Parent = properties.Parent
    end
    return instance
end

local function Tween(instance, properties, duration, style, direction)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(
            duration or Config.AnimSpeed,
            style or Enum.EasingStyle.Quint,
            direction or Enum.EasingDirection.Out
        ),
        properties
    )
    tween:Play()
    return tween
end

local function Ripple(button)
    local ripple = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.8,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.new(0, 0, 0, 0),
        Parent = button
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local tween = Tween(ripple, {
        Size = UDim2.new(2, 0, 2, 0),
        BackgroundTransparency = 1
    }, 0.5)
    
    tween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragging, dragInput, startPos, dragStart
    
    local function update(input)
        local delta = input.Position - dragStart
        Tween(frame, {
            Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        }, 0.1)
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            startPos = frame.Position
            dragStart = input.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Main Window
function Library:CreateWindow(options)
    options = options or {}
    
    local Window = {}
    setmetatable(Window, self)
    
    -- Initialize properties
    Window.Tabs = {}
    Window.ActiveTab = nil
    Window.CurrentTheme = options.Theme or "Dark"
    Config.Theme = Themes[Window.CurrentTheme] or Themes.Dark
    
    -- Clean existing
    if CoreGui:FindFirstChild("SigmaUI") then
        CoreGui:FindFirstChild("SigmaUI"):Destroy()
    end
    
    -- Create GUI
    Window.GUI = Create("ScreenGui", {
        Name = "SigmaUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        Parent = CoreGui
    })
    
    -- Main Frame
    Window.Main = Create("Frame", {
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -310, 0.5, -180),
        Size = Config.WindowSize,
        ClipsDescendants = true,
        Parent = Window.GUI
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Window.Main
    })
    
    -- Shadow
    local Shadow = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.9,
        Position = UDim2.new(0, -8, 0, -8),
        Size = UDim2.new(1, 16, 1, 16),
        ZIndex = -1,
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 18),
        Parent = Shadow
    })
    
    -- Title Bar
    Window.TitleBar = Create("Frame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 36),
        Parent = Window.Main
    })
    
    -- Title
    Window.Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.GothamMedium,
        Text = options.Title or "Sigma UI",
        TextColor3 = Config.Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Window.TitleBar
    })
    
    -- Control Buttons Container
    local Controls = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -90, 0, 0),
        Size = UDim2.new(0, 90, 1, 0),
        Parent = Window.TitleBar
    })
    
    -- Settings Button
    local SettingsBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.GothamMedium,
        Text = "S",
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        Parent = Controls
    })
    
    -- Minimize Button
    local MinimizeBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.GothamMedium,
        Text = "_",
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        Parent = Controls
    })
    
    -- Close Button
    local CloseBtn = Create("TextButton", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 60, 0.5, -9),
        Size = UDim2.new(0, 18, 0, 18),
        Font = Enum.Font.GothamMedium,
        Text = "X",
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        Parent = Controls
    })
    
    -- Button Animations
    for _, btn in pairs({SettingsBtn, MinimizeBtn, CloseBtn}) do
        btn.MouseEnter:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.Text}, 0.2)
        end)
        
        btn.MouseLeave:Connect(function()
            Tween(btn, {TextColor3 = Config.Theme.SubText}, 0.2)
        end)
    end
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {TextColor3 = Color3.fromRGB(255, 100, 100)}, 0.2)
    end)
    
    -- Navigation Sidebar
    Window.Navigation = Create("ScrollingFrame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 36),
        Size = UDim2.new(0, 130, 1, -36),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Config.Theme.Accent,
        ScrollBarImageTransparency = 0.5,
        Parent = Window.Main
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2),
        Parent = Window.Navigation
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Window.Navigation
    })
    
    -- Content Area
    Window.Content = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 135, 0, 41),
        Size = UDim2.new(1, -140, 1, -46),
        Parent = Window.Main
    })
    
    -- Settings Panel (LEFT SIDE)
    Window.SettingsPanel = Create("Frame", {
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, -185, 0, 36),
        Size = UDim2.new(0, 180, 1, -36),
        Visible = false,
        ZIndex = 10,
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Window.SettingsPanel
    })
    
    local SettingsTitle = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = "Themes",
        TextColor3 = Config.Theme.Text,
        TextSize = 13,
        Parent = Window.SettingsPanel
    })
    
    local ThemeList = Create("ScrollingFrame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 35),
        Size = UDim2.new(1, -10, 1, -40),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = Config.Theme.Accent,
        Parent = Window.SettingsPanel
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 3),
        Parent = ThemeList
    })
    
    -- Create theme buttons
    for themeName, themeColors in pairs(Themes) do
        local ThemeBtn = Create("TextButton", {
            BackgroundColor3 = themeColors.Tertiary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 30),
            Font = Enum.Font.Gotham,
            Text = themeName,
            TextColor3 = themeColors.Text,
            TextSize = 11,
            AutoButtonColor = false,
            Parent = ThemeList
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 5),
            Parent = ThemeBtn
        })
        
        local AccentBar = Create("Frame", {
            BackgroundColor3 = themeColors.Accent,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 3, 1, 0),
            Parent = ThemeBtn
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 5),
            Parent = AccentBar
        })
        
        ThemeBtn.MouseEnter:Connect(function()
            Tween(ThemeBtn, {BackgroundTransparency = 0.3}, 0.2)
        end)
        
        ThemeBtn.MouseLeave:Connect(function()
            Tween(ThemeBtn, {BackgroundTransparency = 0}, 0.2)
        end)
        
        ThemeBtn.MouseButton1Click:Connect(function()
            Window:SetTheme(themeName)
            Ripple(ThemeBtn)
        end)
    end
    
    -- Settings Toggle
    local settingsOpen = false
    SettingsBtn.MouseButton1Click:Connect(function()
        settingsOpen = not settingsOpen
        
        if settingsOpen then
            Window.SettingsPanel.Visible = true
            Tween(Window.SettingsPanel, {Position = UDim2.new(0, 0, 0, 36)}, 0.3, Enum.EasingStyle.Back)
        else
            Tween(Window.SettingsPanel, {Position = UDim2.new(0, -185, 0, 36)}, 0.3)
            task.wait(0.3)
            Window.SettingsPanel.Visible = false
        end
    end)
    
    -- Minimize
    local minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            Tween(Window.Main, {Size = UDim2.new(0, 620, 0, 36)}, 0.3, Enum.EasingStyle.Back)
            Window.Navigation.Visible = false
            Window.Content.Visible = false
        else
            Tween(Window.Main, {Size = Config.WindowSize}, 0.3, Enum.EasingStyle.Back)
            task.wait(0.2)
            Window.Navigation.Visible = true
            Window.Content.Visible = true
        end
    end)
    
    -- Close with animation
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(Window.Main, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        Tween(Window.Main, {BackgroundTransparency = 1}, 0.3)
        
        task.wait(0.4)
        Window.GUI:Destroy()
    end)
    
    -- Make draggable
    MakeDraggable(Window.Main, Window.TitleBar)
    
    -- Notification system
    function Window:Notify(options)
        spawn(function()
            local Notif = Create("Frame", {
                BackgroundColor3 = Config.Theme.Secondary,
                BorderSizePixel = 0,
                Position = UDim2.new(1, 10, 1, 0),
                Size = UDim2.new(0, 250, 0, 70),
                Parent = Window.GUI
            })
            
            Create("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = Notif
            })
            
            local Title = Create("TextLabel", {
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 8),
                Size = UDim2.new(1, -20, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = options.Title or "Notification",
                TextColor3 = Config.Theme.Text,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = Notif
            })
            
            local Content = Create("TextLabel", {
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 28),
                Size = UDim2.new(1, -20, 0, 30),
                Font = Enum.Font.Gotham,
                Text = options.Content or "",
                TextColor3 = Config.Theme.SubText,
                TextSize = 11,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                Parent = Notif
            })
            
            -- Slide in
            Tween(Notif, {Position = UDim2.new(1, -260, 1, -80)}, 0.4, Enum.EasingStyle.Back)
            
            task.wait(options.Duration or 3)
            
            -- Slide out
            Tween(Notif, {Position = UDim2.new(1, 10, 1, -80)}, 0.3)
            task.wait(0.3)
            Notif:Destroy()
        end)
    end
    
    -- Set Theme
    function Window:SetTheme(themeName)
        local theme = Themes[themeName]
        if not theme then return end
        
        Config.Theme = theme
        Window.CurrentTheme = themeName
        
        -- Animate theme change
        Tween(Window.Main, {BackgroundColor3 = theme.Background}, 0.3)
        Tween(Window.TitleBar, {BackgroundColor3 = theme.Secondary}, 0.3)
        Tween(Window.Navigation, {BackgroundColor3 = theme.Secondary}, 0.3)
        Tween(Window.Title, {TextColor3 = theme.Text}, 0.3)
        Tween(Window.SettingsPanel, {BackgroundColor3 = theme.Background}, 0.3)
        
        -- Update navigation colors
        Window.Navigation.ScrollBarImageColor3 = theme.Accent
        
        -- Update all tabs
        for _, tab in pairs(Window.Tabs) do
            if tab and tab.Button then
                Tween(tab.Button, {BackgroundColor3 = theme.Tertiary}, 0.3)
                Tween(tab.Label, {TextColor3 = theme.SubText}, 0.3)
            end
        end
        
        -- Update active tab
        if Window.ActiveTab then
            Tween(Window.ActiveTab.Button, {BackgroundColor3 = theme.Accent}, 0.3)
            Tween(Window.ActiveTab.Label, {TextColor3 = theme.Text}, 0.3)
        end
        
        Window:Notify({
            Title = "Theme Changed",
            Content = "Applied " .. themeName .. " theme",
            Duration = 2
        })
    end
    
    -- Open animation
    Window.Main.Size = UDim2.new(0, 0, 0, 0)
    Window.Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Tween(Window.Main, {
        Size = Config.WindowSize,
        Position = UDim2.new(0.5, -310, 0.5, -180)
    }, 0.5, Enum.EasingStyle.Back)
    
    return Window
end

-- Create Tab
function Library:CreateTab(name)
    local Tab = {}
    Tab.Name = name
    
    -- Initialize tabs array if not exists
    if not self.Tabs then
        self.Tabs = {}
    end
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 32),
        Text = "",
        AutoButtonColor = false,
        Parent = self.Navigation
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Tab.Button
    })
    
    Tab.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        Font = Enum.Font.Gotham,
        Text = name,
        TextColor3 = Config.Theme.SubText,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Tab.Button
    })
    
    -- Tab Page
    Tab.Page = Create("ScrollingFrame", {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Config.Theme.Accent,
        ScrollBarImageTransparency = 0.5,
        Visible = false,
        Parent = self.Content
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    -- Tab Selection
    Tab.Button.MouseButton1Click:Connect(function()
        -- Deselect all tabs
        for _, t in pairs(self.Tabs) do
            if t and t.Page then
                t.Page.Visible = false
                Tween(t.Button, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
                Tween(t.Label, {TextColor3 = Config.Theme.SubText}, 0.2)
            end
        end
        
        -- Select this tab
        Tab.Page.Visible = true
        Tween(Tab.Button, {BackgroundColor3 = Config.Theme.Accent}, 0.2)
        Tween(Tab.Label, {TextColor3 = Config.Theme.Text}, 0.2)
        
        self.ActiveTab = Tab
        Ripple(Tab.Button)
    end)
    
    -- Auto select first tab
    if #self.Tabs == 0 then
        Tab.Page.Visible = true
        Tab.Button.BackgroundColor3 = Config.Theme.Accent
        Tab.Label.TextColor3 = Config.Theme.Text
        self.ActiveTab = Tab
    end
    
    table.insert(self.Tabs, Tab)
    return Tab
end

-- Add Section
function Library:AddSection(tab, name)
    local Section = {}
    
    Section.Container = Create("Frame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 30),
        Parent = tab.Page
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Section.Container
    })
    
    Section.Title = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Section.Container
    })
    
    Section.Content = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 30),
        Size = UDim2.new(1, -10, 1, -35),
        Parent = Section.Container
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Section.Content
    })
    
    Section.Content.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Section.Container.Size = UDim2.new(1, -10, 0, Section.Content.UIListLayout.AbsoluteContentSize.Y + 35)
    end)
    
    return Section
end

-- Add Button
function Library:AddButton(section, options)
    local Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 28),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Button",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        AutoButtonColor = false,
        Parent = section.Content
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = Button
    })
    
    Button.MouseEnter:Connect(function()
        Tween(Button, {BackgroundColor3 = Config.Theme.Accent}, 0.2)
    end)
    
    Button.MouseLeave:Connect(function()
        Tween(Button, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
    end)
    
    Button.MouseButton1Click:Connect(function()
        Ripple(Button)
        if options.Callback then
            spawn(options.Callback)
        end
    end)
    
    return Button
end

-- Add Toggle
function Library:AddToggle(section, options)
    local Toggle = {}
    Toggle.State = options.Default or false
    
    local Container = Create("Frame", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Parent = section.Content
    })
    
    local Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0, 0),
        Size = UDim2.new(1, -45, 1, 0),
        Font = Enum.Font.Gotham,
        Text = options.Name or "Toggle",
        TextColor3 = Config.Theme.Text,
        TextSize = 11,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Container
    })
    
    local Switch = Create("Frame", {
        BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -38, 0.5, -9),
        Size = UDim2.new(0, 34, 0, 18),
        Parent = Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 9),
        Parent = Switch
    })
    
    local Knob = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7),
        Size = UDim2.new(0, 14, 0, 14),
        Parent = Switch
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 7),
        Parent = Knob
    })
    
    local Button = Create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = Container
    })
    
    Button.MouseButton1Click:Connect(function()
        Toggle.State = not Toggle.State
        
        Tween(Switch, {
            BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.Tertiary
        }, 0.2)
        
        Tween(Knob, {
            Position = Toggle.State and UDim2.new(1, -16, 0.5, -7) or UDim2.new(0, 2, 0.5, -7)
        }, 0.2, Enum.EasingStyle.Back)
        
        if options.Callback then
            spawn(function()
                options.Callback(Toggle.State)
            end)
        end
    end)
    
    return Toggle
end

return Library
