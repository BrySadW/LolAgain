-- Modern UI Library by @YourName
-- Beautiful, minimalist design with comprehensive components

local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

-- Configuration
local Config = {
    Theme = {
        Background = Color3.fromRGB(18, 18, 22),
        Secondary = Color3.fromRGB(24, 24, 28),
        Tertiary = Color3.fromRGB(30, 30, 35),
        Accent = Color3.fromRGB(88, 130, 255),
        Text = Color3.fromRGB(255, 255, 255),
        TextDark = Color3.fromRGB(150, 150, 150),
        TextInactive = Color3.fromRGB(100, 100, 100),
        Success = Color3.fromRGB(88, 255, 130),
        Warning = Color3.fromRGB(255, 200, 88),
        Error = Color3.fromRGB(255, 88, 88)
    },
    Font = Enum.Font.Gotham,
    TextSize = 13,
    CornerRadius = UDim.new(0, 8),
    AnimationTime = 0.3
}

-- Utility Functions
local function Create(class, properties)
    local instance = Instance.new(class)
    for k, v in pairs(properties or {}) do
        instance[k] = v
    end
    return instance
end

local function Tween(instance, properties, duration)
    TweenService:Create(
        instance,
        TweenInfo.new(duration or Config.AnimationTime, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
        properties
    ):Play()
end

local function MakeDraggable(frame, handle)
    local dragging, dragInput, dragStart, startPos
    
    handle = handle or frame
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Initialize Library
function Library:Create(options)
    options = options or {}
    
    local Window = setmetatable({}, Library)
    Window.Tabs = {}
    Window.Flags = {}
    
    -- Clean up existing
    if CoreGui:FindFirstChild("ModernUI") then
        CoreGui:FindFirstChild("ModernUI"):Destroy()
    end
    
    -- Main GUI
    Window.GUI = Create("ScreenGui", {
        Name = "ModernUI",
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = CoreGui
    })
    
    -- Main Frame
    Window.Main = Create("Frame", {
        Name = "Main",
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -350, 0.5, -250),
        Size = UDim2.new(0, 700, 0, 500),
        Parent = Window.GUI
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = Window.Main
    })
    
    -- Drop Shadow
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -20, 0, -20),
        Size = UDim2.new(1, 40, 1, 40),
        ZIndex = -1,
        Image = "rbxassetid://6014261993",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.4,
        Parent = Window.Main
    })
    
    -- Title Bar
    Window.TitleBar = Create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 45),
        Parent = Window.Main
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = Window.TitleBar
    })
    
    Create("Frame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0.5, 0),
        Size = UDim2.new(1, 0, 0.5, 0),
        Parent = Window.TitleBar
    })
    
    -- Title
    Window.Title = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Config.Font,
        Text = options.Title or "Modern UI",
        TextColor3 = Config.Theme.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Window.TitleBar
    })
    
    -- Window Controls
    local CloseButton = Create("TextButton", {
        Name = "Close",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -40, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Config.Font,
        Text = "Ã—",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 22,
        Parent = Window.TitleBar
    })
    
    CloseButton.MouseEnter:Connect(function()
        Tween(CloseButton, {TextColor3 = Config.Theme.Error}, 0.2)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        Tween(CloseButton, {TextColor3 = Config.Theme.TextDark}, 0.2)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        Window.GUI:Destroy()
    end)
    
    local MinimizeButton = Create("TextButton", {
        Name = "Minimize",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -65, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Config.Font,
        Text = "âˆ’",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 22,
        Parent = Window.TitleBar
    })
    
    MinimizeButton.MouseEnter:Connect(function()
        Tween(MinimizeButton, {TextColor3 = Config.Theme.Text}, 0.2)
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        Tween(MinimizeButton, {TextColor3 = Config.Theme.TextDark}, 0.2)
    end)
    
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(Window.Main, {Size = UDim2.new(0, 700, 0, 45)}, 0.3)
        else
            Tween(Window.Main, {Size = UDim2.new(0, 700, 0, 500)}, 0.3)
        end
    end)
    
    -- Tab Container
    Window.TabContainer = Create("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 45),
        Size = UDim2.new(0, 160, 1, -45),
        Parent = Window.Main
    })
    
    Window.TabList = Create("ScrollingFrame", {
        Name = "TabList",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 10),
        Size = UDim2.new(1, -10, 1, -10),
        ScrollBarThickness = 0,
        Parent = Window.TabContainer
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = Window.TabList
    })
    
    -- Content Container
    Window.ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 170, 0, 55),
        Size = UDim2.new(1, -180, 1, -65),
        Parent = Window.Main
    })
    
    MakeDraggable(Window.Main, Window.TitleBar)
    
    return Window
end

-- Create Tab
function Library:CreateTab(name, icon)
    local Tab = {}
    Tab.Name = name
    Tab.Elements = {}
    
    -- Tab Button
    Tab.Button = Create("TextButton", {
        Name = name .. "Tab",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35),
        Font = Config.Font,
        Text = "",
        Parent = self.TabList
    })
    
    Tab.Indicator = Create("Frame", {
        Name = "Indicator",
        BackgroundColor3 = Config.Theme.Accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, -10, 0, 8),
        Size = UDim2.new(0, 3, 0, 19),
        BackgroundTransparency = 1,
        Parent = Tab.Button
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 2),
        Parent = Tab.Indicator
    })
    
    Tab.Icon = Create("TextLabel", {
        Name = "Icon",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Font = Config.Font,
        Text = icon or "ðŸ“„",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 16,
        Parent = Tab.Button
    })
    
    Tab.Label = Create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 35, 0.5, -10),
        Size = UDim2.new(1, -35, 0, 20),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Tab.Button
    })
    
    -- Tab Page
    Tab.Page = Create("ScrollingFrame", {
        Name = name .. "Page",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Config.Theme.Accent,
        Visible = false,
        Parent = self.ContentContainer
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = Tab.Page
    })
    
    Create("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = Tab.Page
    })
    
    -- Tab Selection
    Tab.Button.MouseButton1Click:Connect(function()
        for _, tab in pairs(self.Tabs) do
            tab.Page.Visible = false
            Tween(tab.Indicator, {BackgroundTransparency = 1}, 0.2)
            Tween(tab.Icon, {TextColor3 = Config.Theme.TextDark}, 0.2)
            Tween(tab.Label, {TextColor3 = Config.Theme.TextDark}, 0.2)
        end
        
        Tab.Page.Visible = true
        Tween(Tab.Indicator, {BackgroundTransparency = 0}, 0.2)
        Tween(Tab.Icon, {TextColor3 = Config.Theme.Text}, 0.2)
        Tween(Tab.Label, {TextColor3 = Config.Theme.Text}, 0.2)
    end)
    
    -- Auto select first tab
    if #self.Tabs == 0 then
        Tab.Page.Visible = true
        Tab.Indicator.BackgroundTransparency = 0
        Tab.Icon.TextColor3 = Config.Theme.Text
        Tab.Label.TextColor3 = Config.Theme.Text
    end
    
    table.insert(self.Tabs, Tab)
    return Tab
end

-- Create Section
function Library:CreateSection(tab, name)
    local Section = {}
    
    Section.Container = Create("Frame", {
        Name = name .. "Section",
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, -10, 0, 40),
        Parent = tab.Page
    })
    
    Create("UICorner", {
        CornerRadius = Config.CornerRadius,
        Parent = Section.Container
    })
    
    Section.Title = Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 10),
        Size = UDim2.new(1, -30, 0, 20),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Section.Container
    })
    
    Section.Content = Create("Frame", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 35),
        Size = UDim2.new(1, -30, 1, -40),
        Parent = Section.Container
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8),
        Parent = Section.Content
    })
    
    local function UpdateSize()
        local contentSize = Section.Content.UIListLayout.AbsoluteContentSize
        Section.Container.Size = UDim2.new(1, -10, 0, contentSize.Y + 45)
    end
    
    Section.Content.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(UpdateSize)
    
    return Section
end

-- Create Label
function Library:CreateLabel(section, text)
    local Label = {}
    
    Label.Container = Create("Frame", {
        Name = "Label",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Parent = section.Content
    })
    
    Label.Text = Create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Config.Font,
        Text = text,
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Label.Container
    })
    
    function Label:SetText(newText)
        Label.Text.Text = newText
    end
    
    return Label
end

-- Create Button
function Library:CreateButton(section, name, callback)
    local Button = {}
    
    Button.Container = Create("Frame", {
        Name = "Button",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 32),
        Parent = section.Content
    })
    
    Button.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        Parent = Button.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Button.Button
    })
    
    Button.Button.MouseEnter:Connect(function()
        Tween(Button.Button, {BackgroundColor3 = Config.Theme.Accent}, 0.2)
    end)
    
    Button.Button.MouseLeave:Connect(function()
        Tween(Button.Button, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
    end)
    
    Button.Button.MouseButton1Click:Connect(function()
        callback()
        
        -- Click animation
        local Circle = Create("Frame", {
            BackgroundColor3 = Config.Theme.Text,
            BackgroundTransparency = 0.7,
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Parent = Button.Button
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(1, 0),
            Parent = Circle
        })
        
        Circle:TweenSize(UDim2.new(2, 0, 2, 0), "Out", "Quad", 0.5, true, function()
            Circle:Destroy()
        end)
        
        Tween(Circle, {BackgroundTransparency = 1}, 0.5)
    end)
    
    return Button
end

-- Create Toggle
function Library:CreateToggle(section, name, default, callback)
    local Toggle = {}
    Toggle.State = default or false
    
    Toggle.Container = Create("Frame", {
        Name = "Toggle",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 25),
        Parent = section.Content
    })
    
    Toggle.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0.5, -10),
        Size = UDim2.new(1, -50, 0, 20),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Toggle.Container
    })
    
    Toggle.Switch = Create("Frame", {
        BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -45, 0.5, -10),
        Size = UDim2.new(0, 40, 0, 20),
        Parent = Toggle.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = Toggle.Switch
    })
    
    Toggle.Knob = Create("Frame", {
        BackgroundColor3 = Config.Theme.Text,
        BorderSizePixel = 0,
        Position = Toggle.State and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Parent = Toggle.Switch
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Toggle.Knob
    })
    
    Toggle.Button = Create("TextButton", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Text = "",
        Parent = Toggle.Container
    })
    
    function Toggle:Set(state)
        Toggle.State = state
        
        Tween(Toggle.Switch, {
            BackgroundColor3 = Toggle.State and Config.Theme.Accent or Config.Theme.Tertiary
        }, 0.2)
        
        Tween(Toggle.Knob, {
            Position = Toggle.State and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        }, 0.2)
        
        callback(Toggle.State)
    end
    
    Toggle.Button.MouseButton1Click:Connect(function()
        Toggle:Set(not Toggle.State)
    end)
    
    return Toggle
end

-- Create Slider
function Library:CreateSlider(section, name, min, max, default, callback)
    local Slider = {}
    Slider.Value = default or min
    
    Slider.Container = Create("Frame", {
        Name = "Slider",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 45),
        Parent = section.Content
    })
    
    Slider.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, -50, 0, 20),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Slider.Container
    })
    
    Slider.Value_Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -45, 0, 0),
        Size = UDim2.new(0, 45, 0, 20),
        Font = Config.Font,
        Text = tostring(Slider.Value),
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = Slider.Container
    })
    
    Slider.Background = Create("Frame", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 25),
        Size = UDim2.new(1, 0, 0, 6),
        Parent = Slider.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = Slider.Background
    })
    
    Slider.Fill = Create("Frame", {
        BackgroundColor3 = Config.Theme.Accent,
        BorderSizePixel = 0,
        Size = UDim2.new((Slider.Value - min) / (max - min), 0, 1, 0),
        Parent = Slider.Background
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = Slider.Fill
    })
    
    Slider.Knob = Create("Frame", {
        BackgroundColor3 = Config.Theme.Text,
        BorderSizePixel = 0,
        Position = UDim2.new((Slider.Value - min) / (max - min), -6, 0.5, -6),
        Size = UDim2.new(0, 12, 0, 12),
        Parent = Slider.Background
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Slider.Knob
    })
    
    local dragging = false
    
    Slider.Background.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local relativePos = mousePos.X - Slider.Background.AbsolutePosition.X
            local percentage = math.clamp(relativePos / Slider.Background.AbsoluteSize.X, 0, 1)
            
            Slider.Value = math.floor(min + (max - min) * percentage)
            Slider.Value_Label.Text = tostring(Slider.Value)
            
            Tween(Slider.Fill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
            Tween(Slider.Knob, {Position = UDim2.new(percentage, -6, 0.5, -6)}, 0.1)
            
            callback(Slider.Value)
        end
    end)
    
    return Slider
end

-- Create Input
function Library:CreateInput(section, name, placeholder, callback)
    local Input = {}
    
    Input.Container = Create("Frame", {
        Name = "Input",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35),
        Parent = section.Content
    })
    
    Input.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.4, 0, 1, 0),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Input.Container
    })
    
    Input.TextBox = Create("TextBox", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0.4, 5, 0, 0),
        Size = UDim2.new(0.6, -5, 1, 0),
        Font = Config.Font,
        PlaceholderText = placeholder,
        PlaceholderColor3 = Config.Theme.TextInactive,
        Text = "",
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        Parent = Input.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Input.TextBox
    })
    
    Input.TextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            callback(Input.TextBox.Text)
        end
    end)
    
    Input.TextBox.Focused:Connect(function()
        Tween(Input.TextBox, {BackgroundColor3 = Config.Theme.Secondary}, 0.2)
    end)
    
    Input.TextBox.FocusLost:Connect(function()
        Tween(Input.TextBox, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
    end)
    
    return Input
end

-- Create Dropdown
function Library:CreateDropdown(section, name, options, default, callback)
    local Dropdown = {}
    Dropdown.Selected = default or options[1]
    Dropdown.Open = false
    
    Dropdown.Container = Create("Frame", {
        Name = "Dropdown",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35),
        Parent = section.Content
    })
    
    Dropdown.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Config.Font,
        Text = "",
        Parent = Dropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Dropdown.Button
    })
    
    Dropdown.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.5, -10, 1, 0),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Dropdown.Button
    })
    
    Dropdown.Value = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 0),
        Size = UDim2.new(0.5, -30, 1, 0),
        Font = Config.Font,
        Text = Dropdown.Selected,
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = Dropdown.Button
    })
    
    Dropdown.Arrow = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Config.Font,
        Text = "â–¼",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 10,
        Parent = Dropdown.Button
    })
    
    Dropdown.List = Create("Frame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 5),
        Size = UDim2.new(1, 0, 0, 0),
        ClipsDescendants = true,
        ZIndex = 10,
        Parent = Dropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Dropdown.List
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = Dropdown.List
    })
    
    for _, option in ipairs(options) do
        local OptionButton = Create("TextButton", {
            BackgroundColor3 = Config.Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 28),
            Font = Config.Font,
            Text = option,
            TextColor3 = Config.Theme.TextDark,
            TextSize = Config.TextSize,
            Parent = Dropdown.List
        })
        
        OptionButton.MouseEnter:Connect(function()
            Tween(OptionButton, {
                BackgroundColor3 = Config.Theme.Tertiary,
                TextColor3 = Config.Theme.Text
            }, 0.2)
        end)
        
        OptionButton.MouseLeave:Connect(function()
            Tween(OptionButton, {
                BackgroundColor3 = Config.Theme.Secondary,
                TextColor3 = Config.Theme.TextDark
            }, 0.2)
        end)
        
        OptionButton.MouseButton1Click:Connect(function()
            Dropdown.Selected = option
            Dropdown.Value.Text = option
            callback(option)
            
            Dropdown.Open = false
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 0}, 0.2)
        end)
    end
    
    Dropdown.Button.MouseButton1Click:Connect(function()
        Dropdown.Open = not Dropdown.Open
        
        if Dropdown.Open then
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, #options * 28)}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 180}, 0.2)
        else
            Tween(Dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            Tween(Dropdown.Arrow, {Rotation = 0}, 0.2)
        end
    end)
    
    return Dropdown
end

-- Create Color Picker
function Library:CreateColorPicker(section, name, default, callback)
    local ColorPicker = {}
    ColorPicker.Color = default or Color3.fromRGB(255, 255, 255)
    ColorPicker.Open = false
    
    ColorPicker.Container = Create("Frame", {
        Name = "ColorPicker",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35),
        Parent = section.Content
    })
    
    ColorPicker.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Config.Font,
        Text = "",
        Parent = ColorPicker.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = ColorPicker.Button
    })
    
    ColorPicker.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -50, 1, 0),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = ColorPicker.Button
    })
    
    ColorPicker.Preview = Create("Frame", {
        BackgroundColor3 = ColorPicker.Color,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -35, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Parent = ColorPicker.Button
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = ColorPicker.Preview
    })
    
    -- Color Picker Window
    ColorPicker.Window = Create("Frame", {
        BackgroundColor3 = Config.Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 10, 0, 0),
        Size = UDim2.new(0, 250, 0, 280),
        ZIndex = 20,
        Visible = false,
        Parent = ColorPicker.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = ColorPicker.Window
    })
    
    -- Color Wheel
    ColorPicker.Wheel = Create("ImageLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, -75, 0, 20),
        Size = UDim2.new(0, 150, 0, 150),
        Image = "rbxassetid://4155801252",
        Parent = ColorPicker.Window
    })
    
    ColorPicker.WheelPicker = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -5, 0.5, -5),
        Size = UDim2.new(0, 10, 0, 10),
        Parent = ColorPicker.Wheel
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = ColorPicker.WheelPicker
    })
    
    -- Brightness Slider
    ColorPicker.BrightnessSlider = Create("Frame", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -100, 0, 180),
        Size = UDim2.new(0, 200, 0, 10),
        Parent = ColorPicker.Window
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = ColorPicker.BrightnessSlider
    })
    
    ColorPicker.BrightnessGradient = Create("UIGradient", {
        Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
        },
        Parent = ColorPicker.BrightnessSlider
    })
    
    ColorPicker.BrightnessKnob = Create("Frame", {
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -7, 0.5, -7),
        Size = UDim2.new(0, 14, 0, 14),
        Parent = ColorPicker.BrightnessSlider
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 7),
        Parent = ColorPicker.BrightnessKnob
    })
    
    -- RGB Input
    local RGBContainer = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 200),
        Size = UDim2.new(1, -40, 0, 60),
        Parent = ColorPicker.Window
    })
    
    local function CreateRGBInput(label, yPos, value)
        local InputFrame = Create("Frame", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, yPos),
            Size = UDim2.new(1, 0, 0, 20),
            Parent = RGBContainer
        })
        
        local Label = Create("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 20, 1, 0),
            Font = Config.Font,
            Text = label,
            TextColor3 = Config.Theme.TextDark,
            TextSize = 12,
            Parent = InputFrame
        })
        
        local Input = Create("TextBox", {
            BackgroundColor3 = Config.Theme.Tertiary,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 25, 0, 0),
            Size = UDim2.new(0, 50, 1, 0),
            Font = Config.Font,
            Text = tostring(value),
            TextColor3 = Config.Theme.Text,
            TextSize = 12,
            Parent = InputFrame
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = Input
        })
        
        return Input
    end
    
    local r, g, b = ColorPicker.Color.R * 255, ColorPicker.Color.G * 255, ColorPicker.Color.B * 255
    ColorPicker.RInput = CreateRGBInput("R", 0, math.floor(r))
    ColorPicker.GInput = CreateRGBInput("G", 20, math.floor(g))
    ColorPicker.BInput = CreateRGBInput("B", 40, math.floor(b))
    
    -- HEX Input
    local HexFrame = Create("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 10, 0, 0),
        Size = UDim2.new(0.5, -10, 1, 0),
        Parent = RGBContainer
    })
    
    local HexLabel = Create("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 30, 0, 20),
        Font = Config.Font,
        Text = "HEX",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 12,
        Parent = HexFrame
    })
    
    ColorPicker.HexInput = Create("TextBox", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 35, 0, 0),
        Size = UDim2.new(1, -35, 0, 20),
        Font = Config.Font,
        Text = string.format("#%02X%02X%02X", r, g, b),
        TextColor3 = Config.Theme.Text,
        TextSize = 12,
        Parent = HexFrame
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = ColorPicker.HexInput
    })
    
    -- Color Picker Logic
    local function UpdateColor(h, s, v)
        local r, g, b = 0, 0, 0
        local i = math.floor(h * 6)
        local f = h * 6 - i
        local p = v * (1 - s)
        local q = v * (1 - f * s)
        local t = v * (1 - (1 - f) * s)
        
        i = i % 6
        
        if i == 0 then
            r, g, b = v, t, p
        elseif i == 1 then
            r, g, b = q, v, p
        elseif i == 2 then
            r, g, b = p, v, t
        elseif i == 3 then
            r, g, b = p, q, v
        elseif i == 4 then
            r, g, b = t, p, v
        elseif i == 5 then
            r, g, b = v, p, q
        end
        
        ColorPicker.Color = Color3.fromRGB(r * 255, g * 255, b * 255)
        ColorPicker.Preview.BackgroundColor3 = ColorPicker.Color
        
        ColorPicker.RInput.Text = tostring(math.floor(r * 255))
        ColorPicker.GInput.Text = tostring(math.floor(g * 255))
        ColorPicker.BInput.Text = tostring(math.floor(b * 255))
        ColorPicker.HexInput.Text = string.format("#%02X%02X%02X", r * 255, g * 255, b * 255)
        
        callback(ColorPicker.Color)
    end
    
    local wheelDragging = false
    local brightnessDragging = false
    
    ColorPicker.Wheel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            wheelDragging = true
        end
    end)
    
    ColorPicker.BrightnessSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            brightnessDragging = true
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            wheelDragging = false
            brightnessDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if wheelDragging then
                local mousePos = UserInputService:GetMouseLocation()
                local wheelPos = ColorPicker.Wheel.AbsolutePosition
                local wheelSize = ColorPicker.Wheel.AbsoluteSize
                
                local centerX = wheelPos.X + wheelSize.X / 2
                local centerY = wheelPos.Y + wheelSize.Y / 2
                
                local dx = mousePos.X - centerX
                local dy = mousePos.Y - centerY
                
                local angle = math.atan2(dy, dx)
                local distance = math.min(math.sqrt(dx * dx + dy * dy), wheelSize.X / 2)
                
                local x = math.cos(angle) * distance
                local y = math.sin(angle) * distance
                
                ColorPicker.WheelPicker.Position = UDim2.new(0.5, x - 5, 0.5, y - 5)
                
                local h = (angle + math.pi) / (2 * math.pi)
                local s = distance / (wheelSize.X / 2)
                local v = 1 - (ColorPicker.BrightnessKnob.Position.X.Scale)
                
                UpdateColor(h, s, v)
            elseif brightnessDragging then
                local mousePos = UserInputService:GetMouseLocation()
                local sliderPos = ColorPicker.BrightnessSlider.AbsolutePosition
                local sliderSize = ColorPicker.BrightnessSlider.AbsoluteSize
                
                local x = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
                ColorPicker.BrightnessKnob.Position = UDim2.new(x, -7, 0.5, -7)
                
                -- Update color based on brightness
                -- This is simplified - you'd need to maintain HSV values properly
            end
        end
    end)
    
    ColorPicker.Button.MouseButton1Click:Connect(function()
        ColorPicker.Open = not ColorPicker.Open
        ColorPicker.Window.Visible = ColorPicker.Open
    end)
    
    MakeDraggable(ColorPicker.Window)
    
    return ColorPicker
end

-- Create Multi Dropdown
function Library:CreateMultiDropdown(section, name, options, default, callback)
    local MultiDropdown = {}
    MultiDropdown.Selected = default or {}
    MultiDropdown.Open = false
    
    MultiDropdown.Container = Create("Frame", {
        Name = "MultiDropdown",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 35),
        Parent = section.Content
    })
    
    MultiDropdown.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Config.Font,
        Text = "",
        Parent = MultiDropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = MultiDropdown.Button
    })
    
    MultiDropdown.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.4, -10, 1, 0),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = MultiDropdown.Button
    })
    
    MultiDropdown.Value = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0.4, 0, 0, 0),
        Size = UDim2.new(0.6, -30, 1, 0),
        Font = Config.Font,
        Text = table.concat(MultiDropdown.Selected, ", "),
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Right,
        TextTruncate = Enum.TextTruncate.AtEnd,
        Parent = MultiDropdown.Button
    })
    
    MultiDropdown.Arrow = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        Font = Config.Font,
        Text = "â–¼",
        TextColor3 = Config.Theme.TextDark,
        TextSize = 10,
        Parent = MultiDropdown.Button
    })
    
    MultiDropdown.List = Create("Frame", {
        BackgroundColor3 = Config.Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 5),
        Size = UDim2.new(1, 0, 0, 0),
        ClipsDescendants = true,
        ZIndex = 10,
        Parent = MultiDropdown.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = MultiDropdown.List
    })
    
    Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = MultiDropdown.List
    })
    
    local optionButtons = {}
    
    for _, option in ipairs(options) do
        local OptionButton = Create("TextButton", {
            BackgroundColor3 = Config.Theme.Secondary,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 28),
            Font = Config.Font,
            Text = "",
            Parent = MultiDropdown.List
        })
        
        local CheckBox = Create("Frame", {
            BackgroundColor3 = Config.Theme.Tertiary,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 8, 0.5, -8),
            Size = UDim2.new(0, 16, 0, 16),
            Parent = OptionButton
        })
        
        Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = CheckBox
        })
        
        local CheckMark = Create("TextLabel", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Font = Config.Font,
            Text = "âœ“",
            TextColor3 = Config.Theme.Accent,
            TextSize = 12,
            TextTransparency = 1,
            Parent = CheckBox
        })
        
        local OptionLabel = Create("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 30, 0, 0),
            Size = UDim2.new(1, -30, 1, 0),
            Font = Config.Font,
            Text = option,
            TextColor3 = Config.Theme.TextDark,
            TextSize = Config.TextSize,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = OptionButton
        })
        
        optionButtons[option] = {
            Button = OptionButton,
            CheckMark = CheckMark,
            Label = OptionLabel,
            Selected = table.find(MultiDropdown.Selected, option) ~= nil
        }
        
        if optionButtons[option].Selected then
            CheckMark.TextTransparency = 0
        end
        
        OptionButton.MouseEnter:Connect(function()
            Tween(OptionButton, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
            Tween(OptionLabel, {TextColor3 = Config.Theme.Text}, 0.2)
        end)
        
        OptionButton.MouseLeave:Connect(function()
            Tween(OptionButton, {BackgroundColor3 = Config.Theme.Secondary}, 0.2)
            Tween(OptionLabel, {TextColor3 = Config.Theme.TextDark}, 0.2)
        end)
        
        OptionButton.MouseButton1Click:Connect(function()
            optionButtons[option].Selected = not optionButtons[option].Selected
            
            if optionButtons[option].Selected then
                table.insert(MultiDropdown.Selected, option)
                Tween(CheckMark, {TextTransparency = 0}, 0.2)
            else
                local index = table.find(MultiDropdown.Selected, option)
                if index then
                    table.remove(MultiDropdown.Selected, index)
                end
                Tween(CheckMark, {TextTransparency = 1}, 0.2)
            end
            
            MultiDropdown.Value.Text = #MultiDropdown.Selected > 0 and table.concat(MultiDropdown.Selected, ", ") or "None"
            callback(MultiDropdown.Selected)
        end)
    end
    
    MultiDropdown.Button.MouseButton1Click:Connect(function()
        MultiDropdown.Open = not MultiDropdown.Open
        
        if MultiDropdown.Open then
            Tween(MultiDropdown.List, {Size = UDim2.new(1, 0, 0, math.min(#options * 28, 200))}, 0.2)
            Tween(MultiDropdown.Arrow, {Rotation = 180}, 0.2)
        else
            Tween(MultiDropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            Tween(MultiDropdown.Arrow, {Rotation = 0}, 0.2)
        end
    end)
    
    return MultiDropdown
end

-- Create Keybind
function Library:CreateKeybind(section, name, default, callback)
    local Keybind = {}
    Keybind.Key = default or Enum.KeyCode.None
    Keybind.Binding = false
    
    Keybind.Container = Create("Frame", {
        Name = "Keybind",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 25),
        Parent = section.Content
    })
    
    Keybind.Label = Create("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0.5, -10),
        Size = UDim2.new(1, -80, 0, 20),
        Font = Config.Font,
        Text = name,
        TextColor3 = Config.Theme.Text,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = Keybind.Container
    })
    
    Keybind.Button = Create("TextButton", {
        BackgroundColor3 = Config.Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -75, 0.5, -12),
        Size = UDim2.new(0, 70, 0, 24),
        Font = Config.Font,
        Text = Keybind.Key.Name,
        TextColor3 = Config.Theme.TextDark,
        TextSize = Config.TextSize,
        Parent = Keybind.Container
    })
    
    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = Keybind.Button
    })
    
    Keybind.Button.MouseButton1Click:Connect(function()
        Keybind.Binding = true
        Keybind.Button.Text = "..."
        Tween(Keybind.Button, {BackgroundColor3 = Config.Theme.Accent}, 0.2)
    end)
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if Keybind.Binding then
            Keybind.Key = input.KeyCode
            Keybind.Button.Text = Keybind.Key.Name
            Keybind.Binding = false
            Tween(Keybind.Button, {BackgroundColor3 = Config.Theme.Tertiary}, 0.2)
        elseif input.KeyCode == Keybind.Key then
            callback()
        end
    end)
    
    return Keybind
end

return Library
